
prjct8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005304  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005498  08005498  00015498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005508  08005508  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005508  08005508  00015508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005510  08005510  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005510  08005510  00015510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005514  08005514  00015514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  2000000c  08005524  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08005524  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013015  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002240  00000000  00000000  00033051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00035298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001040  00000000  00000000  000363a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000244ac  00000000  00000000  000373e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001295b  00000000  00000000  0005b88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e867f  00000000  00000000  0006e1e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156866  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004998  00000000  00000000  001568b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005480 	.word	0x08005480

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08005480 	.word	0x08005480

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <SET_CHANNEL_ONE>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void SET_CHANNEL_ONE() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 80004ee:	463b      	mov	r3, r7
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
 80004fa:	611a      	str	r2, [r3, #16]
 80004fc:	615a      	str	r2, [r3, #20]
	sConfig.Channel = ADC_CHANNEL_1;
 80004fe:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <SET_CHANNEL_ONE+0x4c>)
 8000500:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000502:	2306      	movs	r3, #6
 8000504:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000506:	2307      	movs	r3, #7
 8000508:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800050a:	237f      	movs	r3, #127	; 0x7f
 800050c:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800050e:	2304      	movs	r3, #4
 8000510:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000516:	463b      	mov	r3, r7
 8000518:	4619      	mov	r1, r3
 800051a:	4807      	ldr	r0, [pc, #28]	; (8000538 <SET_CHANNEL_ONE+0x50>)
 800051c:	f001 f9ca 	bl	80018b4 <HAL_ADC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <SET_CHANNEL_ONE+0x42>
		Error_Handler();
 8000526:	f000 facd 	bl	8000ac4 <Error_Handler>
	}

}
 800052a:	bf00      	nop
 800052c:	3718      	adds	r7, #24
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	04300002 	.word	0x04300002
 8000538:	20000028 	.word	0x20000028

0800053c <SET_CHANNEL_TWO>:
void SET_CHANNEL_TWO() {
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]
 800054e:	611a      	str	r2, [r3, #16]
 8000550:	615a      	str	r2, [r3, #20]

	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000552:	2306      	movs	r3, #6
 8000554:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	4806      	ldr	r0, [pc, #24]	; (8000574 <SET_CHANNEL_TWO+0x38>)
 800055c:	f001 f9aa 	bl	80018b4 <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SET_CHANNEL_TWO+0x2e>
		Error_Handler();
 8000566:	f000 faad 	bl	8000ac4 <Error_Handler>
	}

}
 800056a:	bf00      	nop
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <SET_CHANNEL_THREE>:
void SET_CHANNEL_THREE() {
 8000578:	b580      	push	{r7, lr}
 800057a:	b086      	sub	sp, #24
 800057c:	af00      	add	r7, sp, #0

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800057e:	463b      	mov	r3, r7
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]
 800058c:	615a      	str	r2, [r3, #20]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800058e:	2306      	movs	r3, #6
 8000590:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000592:	463b      	mov	r3, r7
 8000594:	4619      	mov	r1, r3
 8000596:	4806      	ldr	r0, [pc, #24]	; (80005b0 <SET_CHANNEL_THREE+0x38>)
 8000598:	f001 f98c 	bl	80018b4 <HAL_ADC_ConfigChannel>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SET_CHANNEL_THREE+0x2e>
		Error_Handler();
 80005a2:	f000 fa8f 	bl	8000ac4 <Error_Handler>
	}

}
 80005a6:	bf00      	nop
 80005a8:	3718      	adds	r7, #24
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000028 	.word	0x20000028

080005b4 <READ_CHANNEL_ONE>:

int READ_CHANNEL_ONE() {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

	int data_conversion_1;
	SET_CHANNEL_ONE();
 80005ba:	f7ff ff95 	bl	80004e8 <SET_CHANNEL_ONE>
	HAL_ADC_Start(&hadc1);
 80005be:	4809      	ldr	r0, [pc, #36]	; (80005e4 <READ_CHANNEL_ONE+0x30>)
 80005c0:	f001 f846 	bl	8001650 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 500);
 80005c4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005c8:	4806      	ldr	r0, [pc, #24]	; (80005e4 <READ_CHANNEL_ONE+0x30>)
 80005ca:	f001 f8d7 	bl	800177c <HAL_ADC_PollForConversion>

	data_conversion_1 = HAL_ADC_GetValue(&hadc1);
 80005ce:	4805      	ldr	r0, [pc, #20]	; (80005e4 <READ_CHANNEL_ONE+0x30>)
 80005d0:	f001 f963 	bl	800189a <HAL_ADC_GetValue>
 80005d4:	4603      	mov	r3, r0
 80005d6:	607b      	str	r3, [r7, #4]
	return data_conversion_1;
 80005d8:	687b      	ldr	r3, [r7, #4]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000028 	.word	0x20000028

080005e8 <READ_CHANNEL_TWO>:

int READ_CHANNEL_TWO() {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
	int data_conversion_2;
	SET_CHANNEL_TWO();
 80005ee:	f7ff ffa5 	bl	800053c <SET_CHANNEL_TWO>
	HAL_ADC_Start(&hadc1);
 80005f2:	4809      	ldr	r0, [pc, #36]	; (8000618 <READ_CHANNEL_TWO+0x30>)
 80005f4:	f001 f82c 	bl	8001650 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 500);
 80005f8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005fc:	4806      	ldr	r0, [pc, #24]	; (8000618 <READ_CHANNEL_TWO+0x30>)
 80005fe:	f001 f8bd 	bl	800177c <HAL_ADC_PollForConversion>

	data_conversion_2 = HAL_ADC_GetValue(&hadc1);
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <READ_CHANNEL_TWO+0x30>)
 8000604:	f001 f949 	bl	800189a <HAL_ADC_GetValue>
 8000608:	4603      	mov	r3, r0
 800060a:	607b      	str	r3, [r7, #4]

	return data_conversion_2;
 800060c:	687b      	ldr	r3, [r7, #4]
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20000028 	.word	0x20000028

0800061c <READ_CHANNEL_THREE>:

int READ_CHANNEL_THREE() {
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	int data_conversion_3;
	SET_CHANNEL_THREE();
 8000622:	f7ff ffa9 	bl	8000578 <SET_CHANNEL_THREE>
	HAL_ADC_Start(&hadc1);
 8000626:	4809      	ldr	r0, [pc, #36]	; (800064c <READ_CHANNEL_THREE+0x30>)
 8000628:	f001 f812 	bl	8001650 <HAL_ADC_Start>

	HAL_ADC_PollForConversion(&hadc1, 500);
 800062c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000630:	4806      	ldr	r0, [pc, #24]	; (800064c <READ_CHANNEL_THREE+0x30>)
 8000632:	f001 f8a3 	bl	800177c <HAL_ADC_PollForConversion>

	data_conversion_3 = HAL_ADC_GetValue(&hadc1);
 8000636:	4805      	ldr	r0, [pc, #20]	; (800064c <READ_CHANNEL_THREE+0x30>)
 8000638:	f001 f92f 	bl	800189a <HAL_ADC_GetValue>
 800063c:	4603      	mov	r3, r0
 800063e:	607b      	str	r3, [r7, #4]

	return data_conversion_3;
 8000640:	687b      	ldr	r3, [r7, #4]
}
 8000642:	4618      	mov	r0, r3
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028

08000650 <HAL_TIM_PeriodElapsedCallback>:

volatile uint32_t tempo = 0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000660:	d104      	bne.n	800066c <HAL_TIM_PeriodElapsedCallback+0x1c>
		tempo++;
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a03      	ldr	r2, [pc, #12]	; (8000678 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800066a:	6013      	str	r3, [r2, #0]
	}
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	200001a8 	.word	0x200001a8

0800067c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800067c:	b580      	push	{r7, lr}
 800067e:	b09e      	sub	sp, #120	; 0x78
 8000680:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000682:	f000 fbfc 	bl	8000e7e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000686:	f000 f86d 	bl	8000764 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800068a:	f000 f9db 	bl	8000a44 <MX_GPIO_Init>
	MX_DMA_Init();
 800068e:	f000 f9bb 	bl	8000a08 <MX_DMA_Init>
	MX_ADC1_Init();
 8000692:	f000 f8b3 	bl	80007fc <MX_ADC1_Init>
	MX_USART2_UART_Init();
 8000696:	f000 f987 	bl	80009a8 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 800069a:	f000 f931 	bl	8000900 <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */

	int data_conversion_1;
	int data_conversion_2;
	int data_conversion_3;
	int c = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	677b      	str	r3, [r7, #116]	; 0x74
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		while (tempo < 1) {
 80006a2:	e03b      	b.n	800071c <main+0xa0>
			HAL_TIM_Base_Start_IT(&htim2);
 80006a4:	482b      	ldr	r0, [pc, #172]	; (8000754 <main+0xd8>)
 80006a6:	f003 fca9 	bl	8003ffc <HAL_TIM_Base_Start_IT>

			HAL_GPIO_WritePin( GPIOA, OnOffPin_Pin, GPIO_PIN_SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006b4:	f002 fa90 	bl	8002bd8 <HAL_GPIO_WritePin>
			data_conversion_1 = READ_CHANNEL_ONE();
 80006b8:	f7ff ff7c 	bl	80005b4 <READ_CHANNEL_ONE>
 80006bc:	6738      	str	r0, [r7, #112]	; 0x70
			HAL_GPIO_WritePin( GPIOA, OnOffPin_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f002 fa86 	bl	8002bd8 <HAL_GPIO_WritePin>

			HAL_GPIO_WritePin( GPIOA, OnOffPin_Pin, GPIO_PIN_SET);
 80006cc:	2201      	movs	r2, #1
 80006ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d6:	f002 fa7f 	bl	8002bd8 <HAL_GPIO_WritePin>
			data_conversion_2 = READ_CHANNEL_TWO();
 80006da:	f7ff ff85 	bl	80005e8 <READ_CHANNEL_TWO>
 80006de:	66f8      	str	r0, [r7, #108]	; 0x6c
			HAL_GPIO_WritePin( GPIOA, OnOffPin_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ea:	f002 fa75 	bl	8002bd8 <HAL_GPIO_WritePin>


			HAL_GPIO_WritePin( GPIOA, OnOffPin_Pin, GPIO_PIN_SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006f8:	f002 fa6e 	bl	8002bd8 <HAL_GPIO_WritePin>
			data_conversion_3 = READ_CHANNEL_THREE();
 80006fc:	f7ff ff8e 	bl	800061c <READ_CHANNEL_THREE>
 8000700:	66b8      	str	r0, [r7, #104]	; 0x68
			HAL_GPIO_WritePin( GPIOA, OnOffPin_Pin, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800070c:	f002 fa64 	bl	8002bd8 <HAL_GPIO_WritePin>

			HAL_ADC_Stop(&hadc1);
 8000710:	4811      	ldr	r0, [pc, #68]	; (8000758 <main+0xdc>)
 8000712:	f001 f800 	bl	8001716 <HAL_ADC_Stop>
			c++;
 8000716:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000718:	3301      	adds	r3, #1
 800071a:	677b      	str	r3, [r7, #116]	; 0x74
		while (tempo < 1) {
 800071c:	4b0f      	ldr	r3, [pc, #60]	; (800075c <main+0xe0>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0bf      	beq.n	80006a4 <main+0x28>
		}
		itoa(c,cBuff,10);
 8000724:	1d3b      	adds	r3, r7, #4
 8000726:	220a      	movs	r2, #10
 8000728:	4619      	mov	r1, r3
 800072a:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800072c:	f004 fe5c 	bl	80053e8 <itoa>
		HAL_UART_Transmit(&huart2, (uint8_t*) cBuff, strlen(cBuff),
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4618      	mov	r0, r3
 8000734:	f7ff fd4e 	bl	80001d4 <strlen>
 8000738:	4603      	mov	r3, r0
 800073a:	b29a      	uxth	r2, r3
 800073c:	1d39      	adds	r1, r7, #4
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <main+0xe4>)
 8000744:	f004 f94a 	bl	80049dc <HAL_UART_Transmit>
		HAL_MAX_DELAY);
		tempo = 0;
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <main+0xe0>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
		c = 0;
 800074e:	2300      	movs	r3, #0
 8000750:	677b      	str	r3, [r7, #116]	; 0x74
		while (tempo < 1) {
 8000752:	e7e3      	b.n	800071c <main+0xa0>
 8000754:	200000d8 	.word	0x200000d8
 8000758:	20000028 	.word	0x20000028
 800075c:	200001a8 	.word	0x200001a8
 8000760:	20000124 	.word	0x20000124

08000764 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	; 0x58
 8000768:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	2244      	movs	r2, #68	; 0x44
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fe3a 	bl	80053ec <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000778:	463b      	mov	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

/** Configure the main internal regulator output voltage
 */
if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK) {
 8000786:	f44f 7000 	mov.w	r0, #512	; 0x200
 800078a:	f002 fa4b 	bl	8002c24 <HAL_PWREx_ControlVoltageScaling>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x34>
	Error_Handler();
 8000794:	f000 f996 	bl	8000ac4 <Error_Handler>
}

/** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000798:	2312      	movs	r3, #18
 800079a:	617b      	str	r3, [r7, #20]
		| RCC_OSCILLATORTYPE_MSI;
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800079c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007a0:	623b      	str	r3, [r7, #32]
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007a6:	2301      	movs	r3, #1
 80007a8:	62fb      	str	r3, [r7, #44]	; 0x2c
RCC_OscInitStruct.MSICalibrationValue = 0;
 80007aa:	2300      	movs	r3, #0
 80007ac:	633b      	str	r3, [r7, #48]	; 0x30
RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007ae:	2360      	movs	r3, #96	; 0x60
 80007b0:	637b      	str	r3, [r7, #52]	; 0x34
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007b2:	2300      	movs	r3, #0
 80007b4:	63fb      	str	r3, [r7, #60]	; 0x3c
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fa88 	bl	8002cd0 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0x66>
	Error_Handler();
 80007c6:	f000 f97d 	bl	8000ac4 <Error_Handler>
}

/** Initializes the CPU, AHB and APB buses clocks
 */
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	603b      	str	r3, [r7, #0]
		| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60bb      	str	r3, [r7, #8]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60fb      	str	r3, [r7, #12]
RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80007de:	463b      	mov	r3, r7
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f002 fe88 	bl	80034f8 <HAL_RCC_ClockConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0x8e>
	Error_Handler();
 80007ee:	f000 f969 	bl	8000ac4 <Error_Handler>
}
}
 80007f2:	bf00      	nop
 80007f4:	3758      	adds	r7, #88	; 0x58
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
	...

080007fc <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC1_Init 0 */

/* USER CODE END ADC1_Init 0 */

ADC_ChannelConfTypeDef sConfig = { 0 };
 8000802:	463b      	mov	r3, r7
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]
 8000810:	615a      	str	r2, [r3, #20]

/* USER CODE END ADC1_Init 1 */

/** Common config
 */
hadc1.Instance = ADC1;
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000814:	4a38      	ldr	r2, [pc, #224]	; (80008f8 <MX_ADC1_Init+0xfc>)
 8000816:	601a      	str	r2, [r3, #0]
hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000818:	4b36      	ldr	r3, [pc, #216]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800081a:	2200      	movs	r2, #0
 800081c:	605a      	str	r2, [r3, #4]
hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800081e:	4b35      	ldr	r3, [pc, #212]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000820:	2210      	movs	r2, #16
 8000822:	609a      	str	r2, [r3, #8]
hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000824:	4b33      	ldr	r3, [pc, #204]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800082a:	4b32      	ldr	r3, [pc, #200]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800082c:	2201      	movs	r2, #1
 800082e:	611a      	str	r2, [r3, #16]
hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000830:	4b30      	ldr	r3, [pc, #192]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000832:	2204      	movs	r2, #4
 8000834:	615a      	str	r2, [r3, #20]
hadc1.Init.LowPowerAutoWait = DISABLE;
 8000836:	4b2f      	ldr	r3, [pc, #188]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000838:	2200      	movs	r2, #0
 800083a:	761a      	strb	r2, [r3, #24]
hadc1.Init.ContinuousConvMode = DISABLE;
 800083c:	4b2d      	ldr	r3, [pc, #180]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800083e:	2200      	movs	r2, #0
 8000840:	765a      	strb	r2, [r3, #25]
hadc1.Init.NbrOfConversion = 3;
 8000842:	4b2c      	ldr	r3, [pc, #176]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000844:	2203      	movs	r2, #3
 8000846:	61da      	str	r2, [r3, #28]
hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000848:	4b2a      	ldr	r3, [pc, #168]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800084a:	2201      	movs	r2, #1
 800084c:	f883 2020 	strb.w	r2, [r3, #32]
hadc1.Init.NbrOfDiscConversion = 2;
 8000850:	4b28      	ldr	r3, [pc, #160]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000852:	2202      	movs	r2, #2
 8000854:	625a      	str	r2, [r3, #36]	; 0x24
hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000856:	4b27      	ldr	r3, [pc, #156]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000858:	2200      	movs	r2, #0
 800085a:	629a      	str	r2, [r3, #40]	; 0x28
hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085c:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800085e:	2200      	movs	r2, #0
 8000860:	62da      	str	r2, [r3, #44]	; 0x2c
hadc1.Init.DMAContinuousRequests = DISABLE;
 8000862:	4b24      	ldr	r3, [pc, #144]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800086c:	2200      	movs	r2, #0
 800086e:	635a      	str	r2, [r3, #52]	; 0x34
hadc1.Init.OversamplingMode = DISABLE;
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_ENABLE;
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <MX_ADC1_Init+0xf8>)
 800087a:	2204      	movs	r2, #4
 800087c:	64da      	str	r2, [r3, #76]	; 0x4c
if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 800087e:	481d      	ldr	r0, [pc, #116]	; (80008f4 <MX_ADC1_Init+0xf8>)
 8000880:	f000 fd9a 	bl	80013b8 <HAL_ADC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC1_Init+0x92>
	Error_Handler();
 800088a:	f000 f91b 	bl	8000ac4 <Error_Handler>
}

/** Configure Regular Channel
 */
sConfig.Channel = ADC_CHANNEL_1;
 800088e:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_ADC1_Init+0x100>)
 8000890:	603b      	str	r3, [r7, #0]
sConfig.Rank = ADC_REGULAR_RANK_1;
 8000892:	2306      	movs	r3, #6
 8000894:	607b      	str	r3, [r7, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089a:	237f      	movs	r3, #127	; 0x7f
 800089c:	60fb      	str	r3, [r7, #12]
sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800089e:	2304      	movs	r3, #4
 80008a0:	613b      	str	r3, [r7, #16]
sConfig.Offset = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008a6:	463b      	mov	r3, r7
 80008a8:	4619      	mov	r1, r3
 80008aa:	4812      	ldr	r0, [pc, #72]	; (80008f4 <MX_ADC1_Init+0xf8>)
 80008ac:	f001 f802 	bl	80018b4 <HAL_ADC_ConfigChannel>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_ADC1_Init+0xbe>
	Error_Handler();
 80008b6:	f000 f905 	bl	8000ac4 <Error_Handler>
}

/** Configure Regular Channel
 */
sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ba:	230c      	movs	r3, #12
 80008bc:	607b      	str	r3, [r7, #4]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	480c      	ldr	r0, [pc, #48]	; (80008f4 <MX_ADC1_Init+0xf8>)
 80008c4:	f000 fff6 	bl	80018b4 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0xd6>
	Error_Handler();
 80008ce:	f000 f8f9 	bl	8000ac4 <Error_Handler>
}

/** Configure Regular Channel
 */
sConfig.Rank = ADC_REGULAR_RANK_3;
 80008d2:	2312      	movs	r3, #18
 80008d4:	607b      	str	r3, [r7, #4]
if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4806      	ldr	r0, [pc, #24]	; (80008f4 <MX_ADC1_Init+0xf8>)
 80008dc:	f000 ffea 	bl	80018b4 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xee>
	Error_Handler();
 80008e6:	f000 f8ed 	bl	8000ac4 <Error_Handler>
}
/* USER CODE BEGIN ADC1_Init 2 */

/* USER CODE END ADC1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000028 	.word	0x20000028
 80008f8:	50040000 	.word	0x50040000
 80008fc:	04300002 	.word	0x04300002

08000900 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b088      	sub	sp, #32
 8000904:	af00      	add	r7, sp, #0

/* USER CODE BEGIN TIM2_Init 0 */

/* USER CODE END TIM2_Init 0 */

TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]

/* USER CODE BEGIN TIM2_Init 1 */

/* USER CODE END TIM2_Init 1 */
htim2.Instance = TIM2;
 800091e:	4b20      	ldr	r3, [pc, #128]	; (80009a0 <MX_TIM2_Init+0xa0>)
 8000920:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000924:	601a      	str	r2, [r3, #0]
htim2.Init.Prescaler = 4;
 8000926:	4b1e      	ldr	r3, [pc, #120]	; (80009a0 <MX_TIM2_Init+0xa0>)
 8000928:	2204      	movs	r2, #4
 800092a:	605a      	str	r2, [r3, #4]
htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092c:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_TIM2_Init+0xa0>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
htim2.Init.Period = 1000000;
 8000932:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <MX_TIM2_Init+0xa0>)
 8000934:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_TIM2_Init+0xa4>)
 8000936:	60da      	str	r2, [r3, #12]
htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000938:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <MX_TIM2_Init+0xa0>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM2_Init+0xa0>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000944:	4816      	ldr	r0, [pc, #88]	; (80009a0 <MX_TIM2_Init+0xa0>)
 8000946:	f003 fbb5 	bl	80040b4 <HAL_TIM_IC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM2_Init+0x54>
	Error_Handler();
 8000950:	f000 f8b8 	bl	8000ac4 <Error_Handler>
}
sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000954:	2300      	movs	r3, #0
 8000956:	617b      	str	r3, [r7, #20]
sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_TIM2_Init+0xa0>)
 8000964:	f003 ff60 	bl	8004828 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0x72>
	Error_Handler();
 800096e:	f000 f8a9 	bl	8000ac4 <Error_Handler>
}
sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000976:	2301      	movs	r3, #1
 8000978:	60bb      	str	r3, [r7, #8]
sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	60fb      	str	r3, [r7, #12]
sConfigIC.ICFilter = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	613b      	str	r3, [r7, #16]
if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2200      	movs	r2, #0
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_TIM2_Init+0xa0>)
 800098a:	f003 fd09 	bl	80043a0 <HAL_TIM_IC_ConfigChannel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM2_Init+0x98>
	Error_Handler();
 8000994:	f000 f896 	bl	8000ac4 <Error_Handler>
}
/* USER CODE BEGIN TIM2_Init 2 */

/* USER CODE END TIM2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	3720      	adds	r7, #32
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	200000d8 	.word	0x200000d8
 80009a4:	000f4240 	.word	0x000f4240

080009a8 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ae:	4a15      	ldr	r2, [pc, #84]	; (8000a04 <MX_USART2_UART_Init+0x5c>)
 80009b0:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 80009b2:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b8:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	621a      	str	r2, [r3, #32]
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart2) != HAL_OK) {
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART2_UART_Init+0x58>)
 80009ec:	f003 ffa8 	bl	8004940 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART2_UART_Init+0x52>
	Error_Handler();
 80009f6:	f000 f865 	bl	8000ac4 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	20000124 	.word	0x20000124
 8000a04:	40004400 	.word	0x40004400

08000a08 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

/* DMA controller clock enable */
__HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	4b0c      	ldr	r3, [pc, #48]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a12:	4a0b      	ldr	r2, [pc, #44]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a14:	f043 0301 	orr.w	r3, r3, #1
 8000a18:	6493      	str	r3, [r2, #72]	; 0x48
 8000a1a:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_DMA_Init+0x38>)
 8000a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	607b      	str	r3, [r7, #4]
 8000a24:	687b      	ldr	r3, [r7, #4]

/* DMA interrupt init */
/* DMA1_Channel1_IRQn interrupt configuration */
HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2100      	movs	r1, #0
 8000a2a:	200b      	movs	r0, #11
 8000a2c:	f001 fdbb 	bl	80025a6 <HAL_NVIC_SetPriority>
HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a30:	200b      	movs	r0, #11
 8000a32:	f001 fdd4 	bl	80025de <HAL_NVIC_EnableIRQ>

}
 8000a36:	bf00      	nop
 8000a38:	3708      	adds	r7, #8
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40021000 	.word	0x40021000

08000a44 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
 8000a58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <MX_GPIO_Init+0x7c>)
 8000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5e:	4a18      	ldr	r2, [pc, #96]	; (8000ac0 <MX_GPIO_Init+0x7c>)
 8000a60:	f043 0304 	orr.w	r3, r3, #4
 8000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a66:	4b16      	ldr	r3, [pc, #88]	; (8000ac0 <MX_GPIO_Init+0x7c>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0304 	and.w	r3, r3, #4
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a72:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_GPIO_Init+0x7c>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	4a12      	ldr	r2, [pc, #72]	; (8000ac0 <MX_GPIO_Init+0x7c>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_GPIO_Init+0x7c>)
 8000a80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(OnOffPin_GPIO_Port, OnOffPin_Pin, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f002 f8a0 	bl	8002bd8 <HAL_GPIO_WritePin>

/*Configure GPIO pin : OnOffPin_Pin */
GPIO_InitStruct.Pin = OnOffPin_Pin;
 8000a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a9c:	60fb      	str	r3, [r7, #12]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	613b      	str	r3, [r7, #16]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
HAL_GPIO_Init(OnOffPin_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab4:	f001 ff16 	bl	80028e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab8:	bf00      	nop
 8000aba:	3720      	adds	r7, #32
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 8000acc:	e7fe      	b.n	8000acc <Error_Handler+0x8>
	...

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x44>)
 8000ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x44>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x44>)
 8000ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <HAL_MspInit+0x44>)
 8000af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af2:	4a08      	ldr	r2, [pc, #32]	; (8000b14 <HAL_MspInit+0x44>)
 8000af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af8:	6593      	str	r3, [r2, #88]	; 0x58
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_MspInit+0x44>)
 8000afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	40021000 	.word	0x40021000

08000b18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b0a4      	sub	sp, #144	; 0x90
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b20:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]
 8000b2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2268      	movs	r2, #104	; 0x68
 8000b36:	2100      	movs	r1, #0
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fc57 	bl	80053ec <memset>
  if(hadc->Instance==ADC1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <HAL_ADC_MspInit+0x118>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d16f      	bne.n	8000c28 <HAL_ADC_MspInit+0x110>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b52:	673b      	str	r3, [r7, #112]	; 0x70
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b54:	2301      	movs	r3, #1
 8000b56:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b5c:	2310      	movs	r3, #16
 8000b5e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b60:	2307      	movs	r3, #7
 8000b62:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b64:	2302      	movs	r3, #2
 8000b66:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b70:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fee2 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b82:	f7ff ff9f 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b86:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	; (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000b8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	4a24      	ldr	r2, [pc, #144]	; (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000ba4:	f043 0304 	orr.w	r3, r3, #4
 8000ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <HAL_ADC_MspInit+0x11c>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    PC2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000bba:	230b      	movs	r3, #11
 8000bbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000bca:	4619      	mov	r1, r3
 8000bcc:	481a      	ldr	r0, [pc, #104]	; (8000c38 <HAL_ADC_MspInit+0x120>)
 8000bce:	f001 fe89 	bl	80028e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000bd4:	4a1a      	ldr	r2, [pc, #104]	; (8000c40 <HAL_ADC_MspInit+0x128>)
 8000bd6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000bd8:	4b18      	ldr	r3, [pc, #96]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bde:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be4:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000bec:	2280      	movs	r2, #128	; 0x80
 8000bee:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000bf2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bf6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bf8:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000bfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bfe:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000c00:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c0c:	480b      	ldr	r0, [pc, #44]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000c0e:	f001 fd01 	bl	8002614 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_ADC_MspInit+0x104>
    {
      Error_Handler();
 8000c18:	f7ff ff54 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a07      	ldr	r2, [pc, #28]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000c20:	651a      	str	r2, [r3, #80]	; 0x50
 8000c22:	4a06      	ldr	r2, [pc, #24]	; (8000c3c <HAL_ADC_MspInit+0x124>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3790      	adds	r7, #144	; 0x90
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	50040000 	.word	0x50040000
 8000c34:	40021000 	.word	0x40021000
 8000c38:	48000800 	.word	0x48000800
 8000c3c:	20000090 	.word	0x20000090
 8000c40:	40020008 	.word	0x40020008

08000c44 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c64:	d130      	bne.n	8000cc8 <HAL_TIM_IC_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	4a19      	ldr	r2, [pc, #100]	; (8000cd0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6593      	str	r3, [r2, #88]	; 0x58
 8000c72:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	4a13      	ldr	r2, [pc, #76]	; (8000cd0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <HAL_TIM_IC_MspInit+0x8c>)
 8000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c96:	2301      	movs	r3, #1
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f001 fe16 	bl	80028e4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	201c      	movs	r0, #28
 8000cbe:	f001 fc72 	bl	80025a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000cc2:	201c      	movs	r0, #28
 8000cc4:	f001 fc8b 	bl	80025de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3728      	adds	r7, #40	; 0x28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021000 	.word	0x40021000

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b0a4      	sub	sp, #144	; 0x90
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	2268      	movs	r2, #104	; 0x68
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 fb79 	bl	80053ec <memset>
  if(huart->Instance==USART2)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a21      	ldr	r2, [pc, #132]	; (8000d84 <HAL_UART_MspInit+0xb0>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d13a      	bne.n	8000d7a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d04:	2302      	movs	r3, #2
 8000d06:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d0c:	f107 0314 	add.w	r3, r7, #20
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 fe15 	bl	8003940 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d1c:	f7ff fed2 	bl	8000ac4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d20:	4b19      	ldr	r3, [pc, #100]	; (8000d88 <HAL_UART_MspInit+0xb4>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	4a18      	ldr	r2, [pc, #96]	; (8000d88 <HAL_UART_MspInit+0xb4>)
 8000d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d2a:	6593      	str	r3, [r2, #88]	; 0x58
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_UART_MspInit+0xb4>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_UART_MspInit+0xb4>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <HAL_UART_MspInit+0xb4>)
 8000d3e:	f043 0301 	orr.w	r3, r3, #1
 8000d42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_UART_MspInit+0xb4>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	f003 0301 	and.w	r3, r3, #1
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d50:	230c      	movs	r3, #12
 8000d52:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d54:	2302      	movs	r3, #2
 8000d56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d60:	2303      	movs	r3, #3
 8000d62:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d66:	2307      	movs	r3, #7
 8000d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d76:	f001 fdb5 	bl	80028e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d7a:	bf00      	nop
 8000d7c:	3790      	adds	r7, #144	; 0x90
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004400 	.word	0x40004400
 8000d88:	40021000 	.word	0x40021000

08000d8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <NMI_Handler+0x4>

08000d92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d96:	e7fe      	b.n	8000d96 <HardFault_Handler+0x4>

08000d98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <MemManage_Handler+0x4>

08000d9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <UsageFault_Handler+0x4>

08000daa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr

08000dc6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd2:	4770      	bx	lr

08000dd4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd8:	f000 f8a6 	bl	8000f28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <DMA1_Channel1_IRQHandler+0x10>)
 8000de6:	f001 fccd 	bl	8002784 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000090 	.word	0x20000090

08000df4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000df8:	4802      	ldr	r0, [pc, #8]	; (8000e04 <TIM2_IRQHandler+0x10>)
 8000dfa:	f003 f9b2 	bl	8004162 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000d8 	.word	0x200000d8

08000e08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	; (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e30:	f7ff ffea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e34:	480c      	ldr	r0, [pc, #48]	; (8000e68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e36:	490d      	ldr	r1, [pc, #52]	; (8000e6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <LoopForever+0xe>)
  movs r3, #0
 8000e3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e3c:	e002      	b.n	8000e44 <LoopCopyDataInit>

08000e3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e42:	3304      	adds	r3, #4

08000e44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e48:	d3f9      	bcc.n	8000e3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4a:	4a0a      	ldr	r2, [pc, #40]	; (8000e74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e4c:	4c0a      	ldr	r4, [pc, #40]	; (8000e78 <LoopForever+0x16>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e50:	e001      	b.n	8000e56 <LoopFillZerobss>

08000e52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e54:	3204      	adds	r2, #4

08000e56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e58:	d3fb      	bcc.n	8000e52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5a:	f004 fa89 	bl	8005370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e5e:	f7ff fc0d 	bl	800067c <main>

08000e62 <LoopForever>:

LoopForever:
    b LoopForever
 8000e62:	e7fe      	b.n	8000e62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e64:	20028000 	.word	0x20028000
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e70:	08005518 	.word	0x08005518
  ldr r2, =_sbss
 8000e74:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e78:	200001b0 	.word	0x200001b0

08000e7c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_IRQHandler>

08000e7e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f001 fb81 	bl	8002590 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f80e 	bl	8000eb0 <HAL_InitTick>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	71fb      	strb	r3, [r7, #7]
 8000e9e:	e001      	b.n	8000ea4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ea0:	f7ff fe16 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <HAL_InitTick+0x6c>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d023      	beq.n	8000f0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ec4:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_InitTick+0x70>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b14      	ldr	r3, [pc, #80]	; (8000f1c <HAL_InitTick+0x6c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fb8d 	bl	80025fa <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d809      	bhi.n	8000f00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eec:	2200      	movs	r2, #0
 8000eee:	6879      	ldr	r1, [r7, #4]
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f001 fb57 	bl	80025a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ef8:	4a0a      	ldr	r2, [pc, #40]	; (8000f24 <HAL_InitTick+0x74>)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	e007      	b.n	8000f10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	73fb      	strb	r3, [r7, #15]
 8000f04:	e004      	b.n	8000f10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e001      	b.n	8000f10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000008 	.word	0x20000008
 8000f20:	20000000 	.word	0x20000000
 8000f24:	20000004 	.word	0x20000004

08000f28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f2c:	4b06      	ldr	r3, [pc, #24]	; (8000f48 <HAL_IncTick+0x20>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_IncTick+0x24>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4413      	add	r3, r2
 8000f38:	4a04      	ldr	r2, [pc, #16]	; (8000f4c <HAL_IncTick+0x24>)
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000008 	.word	0x20000008
 8000f4c:	200001ac 	.word	0x200001ac

08000f50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  return uwTick;
 8000f54:	4b03      	ldr	r3, [pc, #12]	; (8000f64 <HAL_GetTick+0x14>)
 8000f56:	681b      	ldr	r3, [r3, #0]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	200001ac 	.word	0x200001ac

08000f68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	431a      	orrs	r2, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	609a      	str	r2, [r3, #8]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr

08000f8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
 8000f96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	431a      	orrs	r2, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b087      	sub	sp, #28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
 8000fdc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	3360      	adds	r3, #96	; 0x60
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	4413      	add	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <LL_ADC_SetOffset+0x44>)
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	687a      	ldr	r2, [r7, #4]
 8000ff6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ffa:	683a      	ldr	r2, [r7, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	4313      	orrs	r3, r2
 8001000:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001008:	bf00      	nop
 800100a:	371c      	adds	r7, #28
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	03fff000 	.word	0x03fff000

08001018 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001018:	b480      	push	{r7}
 800101a:	b085      	sub	sp, #20
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3360      	adds	r3, #96	; 0x60
 8001026:	461a      	mov	r2, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4413      	add	r3, r2
 800102e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001038:	4618      	mov	r0, r3
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001044:	b480      	push	{r7}
 8001046:	b087      	sub	sp, #28
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	3360      	adds	r3, #96	; 0x60
 8001054:	461a      	mov	r2, r3
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	4413      	add	r3, r2
 800105c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	431a      	orrs	r2, r3
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800106e:	bf00      	nop
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800107a:	b480      	push	{r7}
 800107c:	b083      	sub	sp, #12
 800107e:	af00      	add	r7, sp, #0
 8001080:	6078      	str	r0, [r7, #4]
 8001082:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	695b      	ldr	r3, [r3, #20]
 8001088:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	615a      	str	r2, [r3, #20]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010b4:	2301      	movs	r3, #1
 80010b6:	e000      	b.n	80010ba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c6:	b480      	push	{r7}
 80010c8:	b087      	sub	sp, #28
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3330      	adds	r3, #48	; 0x30
 80010d6:	461a      	mov	r2, r3
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	0a1b      	lsrs	r3, r3, #8
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	f003 030c 	and.w	r3, r3, #12
 80010e2:	4413      	add	r3, r2
 80010e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f003 031f 	and.w	r3, r3, #31
 80010f0:	211f      	movs	r1, #31
 80010f2:	fa01 f303 	lsl.w	r3, r1, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	401a      	ands	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	0e9b      	lsrs	r3, r3, #26
 80010fe:	f003 011f 	and.w	r1, r3, #31
 8001102:	68bb      	ldr	r3, [r7, #8]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001112:	bf00      	nop
 8001114:	371c      	adds	r7, #28
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800111e:	b480      	push	{r7}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3314      	adds	r3, #20
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	0e5b      	lsrs	r3, r3, #25
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	f003 0304 	and.w	r3, r3, #4
 800113a:	4413      	add	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	0d1b      	lsrs	r3, r3, #20
 8001146:	f003 031f 	and.w	r3, r3, #31
 800114a:	2107      	movs	r1, #7
 800114c:	fa01 f303 	lsl.w	r3, r1, r3
 8001150:	43db      	mvns	r3, r3
 8001152:	401a      	ands	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	0d1b      	lsrs	r3, r3, #20
 8001158:	f003 031f 	and.w	r3, r3, #31
 800115c:	6879      	ldr	r1, [r7, #4]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	431a      	orrs	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001168:	bf00      	nop
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001174:	b480      	push	{r7}
 8001176:	b085      	sub	sp, #20
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800118c:	43db      	mvns	r3, r3
 800118e:	401a      	ands	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0318 	and.w	r3, r3, #24
 8001196:	4908      	ldr	r1, [pc, #32]	; (80011b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001198:	40d9      	lsrs	r1, r3
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	400b      	ands	r3, r1
 800119e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011a2:	431a      	orrs	r2, r3
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011aa:	bf00      	nop
 80011ac:	3714      	adds	r7, #20
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	0007ffff 	.word	0x0007ffff

080011bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6093      	str	r3, [r2, #8]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80011f4:	d101      	bne.n	80011fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800121c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001244:	d101      	bne.n	800124a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001246:	2301      	movs	r3, #1
 8001248:	e000      	b.n	800124c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800124a:	2300      	movs	r3, #0
}
 800124c:	4618      	mov	r0, r3
 800124e:	370c      	adds	r7, #12
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800126c:	f043 0201 	orr.w	r2, r3, #1
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001294:	f043 0202 	orr.w	r2, r3, #2
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <LL_ADC_IsEnabled+0x18>
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <LL_ADC_IsEnabled+0x1a>
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d101      	bne.n	80012e6 <LL_ADC_IsDisableOngoing+0x18>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <LL_ADC_IsDisableOngoing+0x1a>
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800132c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001330:	f043 0210 	orr.w	r2, r3, #16
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b04      	cmp	r3, #4
 8001356:	d101      	bne.n	800135c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800136a:	b480      	push	{r7}
 800136c:	b083      	sub	sp, #12
 800136e:	af00      	add	r7, sp, #0
 8001370:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800137a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800137e:	f043 0220 	orr.w	r2, r3, #32
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d101      	bne.n	80013aa <LL_ADC_INJ_IsConversionOngoing+0x18>
 80013a6:	2301      	movs	r3, #1
 80013a8:	e000      	b.n	80013ac <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e12f      	b.n	8001632 <HAL_ADC_Init+0x27a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	691b      	ldr	r3, [r3, #16]
 80013d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fb99 	bl	8000b18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fef1 	bl	80011e0 <LL_ADC_IsDeepPowerDownEnabled>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff fed7 	bl	80011bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff ff0c 	bl	8001230 <LL_ADC_IsInternalRegulatorEnabled>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d115      	bne.n	800144a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff fef0 	bl	8001208 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001428:	4b84      	ldr	r3, [pc, #528]	; (800163c <HAL_ADC_Init+0x284>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	4a84      	ldr	r2, [pc, #528]	; (8001640 <HAL_ADC_Init+0x288>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	099b      	lsrs	r3, r3, #6
 8001436:	3301      	adds	r3, #1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800143c:	e002      	b.n	8001444 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	3b01      	subs	r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f9      	bne.n	800143e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff feee 	bl	8001230 <LL_ADC_IsInternalRegulatorEnabled>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	f043 0210 	orr.w	r2, r3, #16
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800146a:	f043 0201 	orr.w	r2, r3, #1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff ff62 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 8001480:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 80c8 	bne.w	8001620 <HAL_ADC_Init+0x268>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 80c4 	bne.w	8001620 <HAL_ADC_Init+0x268>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80014a0:	f043 0202 	orr.w	r2, r3, #2
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fefb 	bl	80012a8 <LL_ADC_IsEnabled>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10b      	bne.n	80014d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80014b8:	4862      	ldr	r0, [pc, #392]	; (8001644 <HAL_ADC_Init+0x28c>)
 80014ba:	f7ff fef5 	bl	80012a8 <LL_ADC_IsEnabled>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	4619      	mov	r1, r3
 80014ca:	485f      	ldr	r0, [pc, #380]	; (8001648 <HAL_ADC_Init+0x290>)
 80014cc:	f7ff fd4c 	bl	8000f68 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	7e5b      	ldrb	r3, [r3, #25]
 80014d4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014da:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80014e0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80014e6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80014f0:	4313      	orrs	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d106      	bne.n	800150c <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	3b01      	subs	r3, #1
 8001504:	045b      	lsls	r3, r3, #17
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001510:	2b00      	cmp	r3, #0
 8001512:	d009      	beq.n	8001528 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001518:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001520:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	4313      	orrs	r3, r2
 8001526:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	4b47      	ldr	r3, [pc, #284]	; (800164c <HAL_ADC_Init+0x294>)
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6812      	ldr	r2, [r2, #0]
 8001536:	69b9      	ldr	r1, [r7, #24]
 8001538:	430b      	orrs	r3, r1
 800153a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff feff 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 8001546:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff20 	bl	8001392 <LL_ADC_INJ_IsConversionOngoing>
 8001552:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d140      	bne.n	80015dc <HAL_ADC_Init+0x224>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d13d      	bne.n	80015dc <HAL_ADC_Init+0x224>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	7e1b      	ldrb	r3, [r3, #24]
 8001568:	039b      	lsls	r3, r3, #14
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800156a:	431a      	orrs	r2, r3
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001572:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001582:	f023 0306 	bic.w	r3, r3, #6
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	69b9      	ldr	r1, [r7, #24]
 800158c:	430b      	orrs	r3, r1
 800158e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001596:	2b01      	cmp	r3, #1
 8001598:	d118      	bne.n	80015cc <HAL_ADC_Init+0x214>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015b0:	4311      	orrs	r1, r2
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80015b6:	4311      	orrs	r1, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80015bc:	430a      	orrs	r2, r1
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f042 0201 	orr.w	r2, r2, #1
 80015c8:	611a      	str	r2, [r3, #16]
 80015ca:	e007      	b.n	80015dc <HAL_ADC_Init+0x224>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	691a      	ldr	r2, [r3, #16]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 0201 	bic.w	r2, r2, #1
 80015da:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	691b      	ldr	r3, [r3, #16]
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d10c      	bne.n	80015fe <HAL_ADC_Init+0x246>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f023 010f 	bic.w	r1, r3, #15
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	1e5a      	subs	r2, r3, #1
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	631a      	str	r2, [r3, #48]	; 0x30
 80015fc:	e007      	b.n	800160e <HAL_ADC_Init+0x256>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 020f 	bic.w	r2, r2, #15
 800160c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	659a      	str	r2, [r3, #88]	; 0x58
 800161e:	e007      	b.n	8001630 <HAL_ADC_Init+0x278>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001624:	f043 0210 	orr.w	r2, r3, #16
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001630:	7ffb      	ldrb	r3, [r7, #31]
}
 8001632:	4618      	mov	r0, r3
 8001634:	3720      	adds	r7, #32
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	20000000 	.word	0x20000000
 8001640:	053e2d63 	.word	0x053e2d63
 8001644:	50040000 	.word	0x50040000
 8001648:	50040300 	.word	0x50040300
 800164c:	fff0c007 	.word	0xfff0c007

08001650 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe71 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d14f      	bne.n	8001708 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800166e:	2b01      	cmp	r3, #1
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Start+0x26>
 8001672:	2302      	movs	r3, #2
 8001674:	e04b      	b.n	800170e <HAL_ADC_Start+0xbe>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 fdd0 	bl	8002224 <ADC_Enable>
 8001684:	4603      	mov	r3, r0
 8001686:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001688:	7bfb      	ldrb	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d137      	bne.n	80016fe <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001692:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001696:	f023 0301 	bic.w	r3, r3, #1
 800169a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	659a      	str	r2, [r3, #88]	; 0x58
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016ae:	d106      	bne.n	80016be <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b4:	f023 0206 	bic.w	r2, r3, #6
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80016bc:	e002      	b.n	80016c4 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	221c      	movs	r2, #28
 80016ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2200      	movs	r2, #0
 80016d0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80016ea:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fdfc 	bl	80012f4 <LL_ADC_REG_StartConversion>
 80016fc:	e006      	b.n	800170c <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8001706:	e001      	b.n	800170c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001708:	2302      	movs	r3, #2
 800170a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001724:	2b01      	cmp	r3, #1
 8001726:	d101      	bne.n	800172c <HAL_ADC_Stop+0x16>
 8001728:	2302      	movs	r3, #2
 800172a:	e023      	b.n	8001774 <HAL_ADC_Stop+0x5e>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2201      	movs	r2, #1
 8001730:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001734:	2103      	movs	r1, #3
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 fcb8 	bl	80020ac <ADC_ConversionStop>
 800173c:	4603      	mov	r3, r0
 800173e:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001740:	7bfb      	ldrb	r3, [r7, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d111      	bne.n	800176a <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fdf2 	bl	8002330 <ADC_Disable>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d109      	bne.n	800176a <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f043 0201 	orr.w	r2, r3, #1
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8001772:	7bfb      	ldrb	r3, [r7, #15]
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	2b08      	cmp	r3, #8
 800178c:	d102      	bne.n	8001794 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800178e:	2308      	movs	r3, #8
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	e010      	b.n	80017b6 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d007      	beq.n	80017b2 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a6:	f043 0220 	orr.w	r2, r3, #32
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e06f      	b.n	8001892 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 80017b2:	2304      	movs	r3, #4
 80017b4:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80017b6:	f7ff fbcb 	bl	8000f50 <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017bc:	e021      	b.n	8001802 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017c4:	d01d      	beq.n	8001802 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80017c6:	f7ff fbc3 	bl	8000f50 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d302      	bcc.n	80017dc <HAL_ADC_PollForConversion+0x60>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d112      	bne.n	8001802 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10b      	bne.n	8001802 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ee:	f043 0204 	orr.w	r2, r3, #4
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2200      	movs	r2, #0
 80017fa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e047      	b.n	8001892 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0d6      	beq.n	80017be <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001814:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fc3d 	bl	80010a0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d01c      	beq.n	8001866 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7e5b      	ldrb	r3, [r3, #25]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d118      	bne.n	8001866 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b08      	cmp	r3, #8
 8001840:	d111      	bne.n	8001866 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	659a      	str	r2, [r3, #88]	; 0x58

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d105      	bne.n	8001866 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185e:	f043 0201 	orr.w	r2, r3, #1
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	659a      	str	r2, [r3, #88]	; 0x58
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	2b08      	cmp	r3, #8
 8001872:	d104      	bne.n	800187e <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2208      	movs	r2, #8
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	e008      	b.n	8001890 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d103      	bne.n	8001890 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	220c      	movs	r2, #12
 800188e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b0b6      	sub	sp, #216	; 0xd8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_ADC_ConfigChannel+0x22>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e3d5      	b.n	8002082 <HAL_ADC_ConfigChannel+0x7ce>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fd2e 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 83ba 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x7b0>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d824      	bhi.n	8001942 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	3b02      	subs	r3, #2
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d81b      	bhi.n	800193a <HAL_ADC_ConfigChannel+0x86>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <HAL_ADC_ConfigChannel+0x54>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001919 	.word	0x08001919
 800190c:	08001921 	.word	0x08001921
 8001910:	08001929 	.word	0x08001929
 8001914:	08001931 	.word	0x08001931
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	220c      	movs	r2, #12
 800191c:	605a      	str	r2, [r3, #4]
          break;
 800191e:	e011      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2212      	movs	r2, #18
 8001924:	605a      	str	r2, [r3, #4]
          break;
 8001926:	e00d      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	2218      	movs	r2, #24
 800192c:	605a      	str	r2, [r3, #4]
          break;
 800192e:	e009      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001936:	605a      	str	r2, [r3, #4]
          break;
 8001938:	e004      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	2206      	movs	r2, #6
 800193e:	605a      	str	r2, [r3, #4]
          break;
 8001940:	e000      	b.n	8001944 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001942:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	f7ff fbb8 	bl	80010c6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff fcf2 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 8001960:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fd12 	bl	8001392 <LL_ADC_INJ_IsConversionOngoing>
 800196e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001972:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 81c1 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x44a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800197c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001980:	2b00      	cmp	r3, #0
 8001982:	f040 81bc 	bne.w	8001cfe <HAL_ADC_ConfigChannel+0x44a>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800198e:	d10f      	bne.n	80019b0 <HAL_ADC_ConfigChannel+0xfc>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	4619      	mov	r1, r3
 800199c:	f7ff fbbf 	bl	800111e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fb66 	bl	800107a <LL_ADC_SetSamplingTimeCommonConfig>
 80019ae:	e00e      	b.n	80019ce <HAL_ADC_ConfigChannel+0x11a>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	6819      	ldr	r1, [r3, #0]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	461a      	mov	r2, r3
 80019be:	f7ff fbae 	bl	800111e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2100      	movs	r1, #0
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fb56 	bl	800107a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	695a      	ldr	r2, [r3, #20]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	08db      	lsrs	r3, r3, #3
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	2b04      	cmp	r3, #4
 80019ee:	d00a      	beq.n	8001a06 <HAL_ADC_ConfigChannel+0x152>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6818      	ldr	r0, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	6919      	ldr	r1, [r3, #16]
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001a00:	f7ff fae6 	bl	8000fd0 <LL_ADC_SetOffset>
 8001a04:	e17b      	b.n	8001cfe <HAL_ADC_ConfigChannel+0x44a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fb03 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10a      	bne.n	8001a32 <HAL_ADC_ConfigChannel+0x17e>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff faf8 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	0e9b      	lsrs	r3, r3, #26
 8001a2c:	f003 021f 	and.w	r2, r3, #31
 8001a30:	e01e      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1bc>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff faed 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a50:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001a54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_ConfigChannel+0x1b0>
  {
    return 32U;
 8001a60:	2320      	movs	r3, #32
 8001a62:	e004      	b.n	8001a6e <HAL_ADC_ConfigChannel+0x1ba>
  }
  return __builtin_clz(value);
 8001a64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d105      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d4>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	0e9b      	lsrs	r3, r3, #26
 8001a82:	f003 031f 	and.w	r3, r3, #31
 8001a86:	e018      	b.n	8001aba <HAL_ADC_ConfigChannel+0x206>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001a94:	fa93 f3a3 	rbit	r3, r3
 8001a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001aa4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_ADC_ConfigChannel+0x1fc>
    return 32U;
 8001aac:	2320      	movs	r3, #32
 8001aae:	e004      	b.n	8001aba <HAL_ADC_ConfigChannel+0x206>
  return __builtin_clz(value);
 8001ab0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d106      	bne.n	8001acc <HAL_ADC_ConfigChannel+0x218>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fabc 	bl	8001044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff faa0 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d10a      	bne.n	8001af8 <HAL_ADC_ConfigChannel+0x244>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa95 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001aee:	4603      	mov	r3, r0
 8001af0:	0e9b      	lsrs	r3, r3, #26
 8001af2:	f003 021f 	and.w	r2, r3, #31
 8001af6:	e01e      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x282>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2101      	movs	r1, #1
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7ff fa8a 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 8001b12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001b1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001b1e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d101      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x276>
    return 32U;
 8001b26:	2320      	movs	r3, #32
 8001b28:	e004      	b.n	8001b34 <HAL_ADC_ConfigChannel+0x280>
  return __builtin_clz(value);
 8001b2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d105      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x29a>
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0e9b      	lsrs	r3, r3, #26
 8001b48:	f003 031f 	and.w	r3, r3, #31
 8001b4c:	e018      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2cc>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001b5a:	fa93 f3a3 	rbit	r3, r3
 8001b5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001b62:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001b66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001b6a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_ADC_ConfigChannel+0x2c2>
    return 32U;
 8001b72:	2320      	movs	r3, #32
 8001b74:	e004      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x2cc>
  return __builtin_clz(value);
 8001b76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d106      	bne.n	8001b92 <HAL_ADC_ConfigChannel+0x2de>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	2101      	movs	r1, #1
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff fa59 	bl	8001044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2102      	movs	r1, #2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff fa3d 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10a      	bne.n	8001bbe <HAL_ADC_ConfigChannel+0x30a>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2102      	movs	r1, #2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fa32 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	0e9b      	lsrs	r3, r3, #26
 8001bb8:	f003 021f 	and.w	r2, r3, #31
 8001bbc:	e01e      	b.n	8001bfc <HAL_ADC_ConfigChannel+0x348>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2102      	movs	r1, #2
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fa27 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bd4:	fa93 f3a3 	rbit	r3, r3
 8001bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001be0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001be4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x33c>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e004      	b.n	8001bfa <HAL_ADC_ConfigChannel+0x346>
  return __builtin_clz(value);
 8001bf0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bf4:	fab3 f383 	clz	r3, r3
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d105      	bne.n	8001c14 <HAL_ADC_ConfigChannel+0x360>
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0e9b      	lsrs	r3, r3, #26
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	e016      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x38e>
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c20:	fa93 f3a3 	rbit	r3, r3
 8001c24:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001c26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001c28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x384>
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e004      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x38e>
  return __builtin_clz(value);
 8001c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x3a0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f9f8 	bl	8001044 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2103      	movs	r1, #3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f9dc 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x3cc>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2103      	movs	r1, #3
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f9d1 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	e017      	b.n	8001cb0 <HAL_ADC_ConfigChannel+0x3fc>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2103      	movs	r1, #3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f9c6 	bl	8001018 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001c92:	fa93 f3a3 	rbit	r3, r3
 8001c96:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8001c98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c9a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8001c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_ConfigChannel+0x3f2>
    return 32U;
 8001ca2:	2320      	movs	r3, #32
 8001ca4:	e003      	b.n	8001cae <HAL_ADC_ConfigChannel+0x3fa>
  return __builtin_clz(value);
 8001ca6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001ca8:	fab3 f383 	clz	r3, r3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d105      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x414>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	0e9b      	lsrs	r3, r3, #26
 8001cc2:	f003 031f 	and.w	r3, r3, #31
 8001cc6:	e011      	b.n	8001cec <HAL_ADC_ConfigChannel+0x438>
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001cd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8001cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x430>
    return 32U;
 8001ce0:	2320      	movs	r3, #32
 8001ce2:	e003      	b.n	8001cec <HAL_ADC_ConfigChannel+0x438>
  return __builtin_clz(value);
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d106      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x44a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2103      	movs	r1, #3
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff f9a3 	bl	8001044 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fad0 	bl	80012a8 <LL_ADC_IsEnabled>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f040 8140 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	6819      	ldr	r1, [r3, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	f7ff fa29 	bl	8001174 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	4a8f      	ldr	r2, [pc, #572]	; (8001f64 <HAL_ADC_ConfigChannel+0x6b0>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	f040 8131 	bne.w	8001f90 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10b      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x4a2>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	0e9b      	lsrs	r3, r3, #26
 8001d44:	3301      	adds	r3, #1
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2b09      	cmp	r3, #9
 8001d4c:	bf94      	ite	ls
 8001d4e:	2301      	movls	r3, #1
 8001d50:	2300      	movhi	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	e019      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x4d6>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5e:	fa93 f3a3 	rbit	r3, r3
 8001d62:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8001d64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d66:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8001d68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e003      	b.n	8001d7a <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8001d72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d74:	fab3 f383 	clz	r3, r3
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	f003 031f 	and.w	r3, r3, #31
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	bf94      	ite	ls
 8001d84:	2301      	movls	r3, #1
 8001d86:	2300      	movhi	r3, #0
 8001d88:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d079      	beq.n	8001e82 <HAL_ADC_ConfigChannel+0x5ce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x4f6>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	e015      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x522>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001dba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8001dbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x512>
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e003      	b.n	8001dce <HAL_ADC_ConfigChannel+0x51a>
  return __builtin_clz(value);
 8001dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x542>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	e017      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x572>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8001e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e06:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8001e08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x55e>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x566>
  return __builtin_clz(value);
 8001e12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10a      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x598>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	051b      	lsls	r3, r3, #20
 8001e4a:	e018      	b.n	8001e7e <HAL_ADC_ConfigChannel+0x5ca>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8001e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x5b4>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x5bc>
  return __builtin_clz(value);
 8001e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f003 021f 	and.w	r2, r3, #31
 8001e76:	4613      	mov	r3, r2
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	4413      	add	r3, r2
 8001e7c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	e081      	b.n	8001f86 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d107      	bne.n	8001e9e <HAL_ADC_ConfigChannel+0x5ea>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	0e9b      	lsrs	r3, r3, #26
 8001e94:	3301      	adds	r3, #1
 8001e96:	069b      	lsls	r3, r3, #26
 8001e98:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001e9c:	e015      	b.n	8001eca <HAL_ADC_ConfigChannel+0x616>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea6:	fa93 f3a3 	rbit	r3, r3
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8001eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d101      	bne.n	8001eba <HAL_ADC_ConfigChannel+0x606>
    return 32U;
 8001eb6:	2320      	movs	r3, #32
 8001eb8:	e003      	b.n	8001ec2 <HAL_ADC_ConfigChannel+0x60e>
  return __builtin_clz(value);
 8001eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	069b      	lsls	r3, r3, #26
 8001ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d109      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x636>
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	3301      	adds	r3, #1
 8001ede:	f003 031f 	and.w	r3, r3, #31
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee8:	e017      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x666>
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	61fb      	str	r3, [r7, #28]
  return result;
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x652>
    return 32U;
 8001f02:	2320      	movs	r3, #32
 8001f04:	e003      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x65a>
  return __builtin_clz(value);
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	fab3 f383 	clz	r3, r3
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f003 031f 	and.w	r3, r3, #31
 8001f14:	2101      	movs	r1, #1
 8001f16:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1a:	ea42 0103 	orr.w	r1, r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_ADC_ConfigChannel+0x692>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	0e9b      	lsrs	r3, r3, #26
 8001f30:	3301      	adds	r3, #1
 8001f32:	f003 021f 	and.w	r2, r3, #31
 8001f36:	4613      	mov	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b1e      	subs	r3, #30
 8001f3e:	051b      	lsls	r3, r3, #20
 8001f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f44:	e01e      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x6d0>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	fa93 f3a3 	rbit	r3, r3
 8001f52:	613b      	str	r3, [r7, #16]
  return result;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8001f5e:	2320      	movs	r3, #32
 8001f60:	e006      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x6bc>
 8001f62:	bf00      	nop
 8001f64:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	fab3 f383 	clz	r3, r3
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f003 021f 	and.w	r2, r3, #31
 8001f76:	4613      	mov	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	4413      	add	r3, r2
 8001f7c:	3b1e      	subs	r3, #30
 8001f7e:	051b      	lsls	r3, r3, #20
 8001f80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f84:	430b      	orrs	r3, r1
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	6892      	ldr	r2, [r2, #8]
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7ff f8c7 	bl	800111e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_ADC_ConfigChannel+0x7d8>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d06c      	beq.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	483c      	ldr	r0, [pc, #240]	; (8002090 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f9e:	f7ff f809 	bl	8000fb4 <LL_ADC_GetCommonPathInternalCh>
 8001fa2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a3a      	ldr	r2, [pc, #232]	; (8002094 <HAL_ADC_ConfigChannel+0x7e0>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d127      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001fb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d121      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a35      	ldr	r2, [pc, #212]	; (8002098 <HAL_ADC_ConfigChannel+0x7e4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d157      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001fca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001fce:	4619      	mov	r1, r3
 8001fd0:	482f      	ldr	r0, [pc, #188]	; (8002090 <HAL_ADC_ConfigChannel+0x7dc>)
 8001fd2:	f7fe ffdc 	bl	8000f8e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_ADC_ConfigChannel+0x7e8>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <HAL_ADC_ConfigChannel+0x7ec>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	099b      	lsrs	r3, r3, #6
 8001fe4:	1c5a      	adds	r2, r3, #1
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ff0:	e002      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	3b01      	subs	r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f9      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ffe:	e03a      	b.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a27      	ldr	r2, [pc, #156]	; (80020a4 <HAL_ADC_ConfigChannel+0x7f0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d113      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x77e>
 800200a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800200e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10d      	bne.n	8002032 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1f      	ldr	r2, [pc, #124]	; (8002098 <HAL_ADC_ConfigChannel+0x7e4>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d12a      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002020:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002024:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002028:	4619      	mov	r1, r3
 800202a:	4819      	ldr	r0, [pc, #100]	; (8002090 <HAL_ADC_ConfigChannel+0x7dc>)
 800202c:	f7fe ffaf 	bl	8000f8e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002030:	e021      	b.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a1c      	ldr	r2, [pc, #112]	; (80020a8 <HAL_ADC_ConfigChannel+0x7f4>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d11c      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800203c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002040:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d116      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a12      	ldr	r2, [pc, #72]	; (8002098 <HAL_ADC_ConfigChannel+0x7e4>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d111      	bne.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205a:	4619      	mov	r1, r3
 800205c:	480c      	ldr	r0, [pc, #48]	; (8002090 <HAL_ADC_ConfigChannel+0x7dc>)
 800205e:	f7fe ff96 	bl	8000f8e <LL_ADC_SetCommonPathInternalCh>
 8002062:	e008      	b.n	8002076 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f043 0220 	orr.w	r2, r3, #32
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 800207e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002082:	4618      	mov	r0, r3
 8002084:	37d8      	adds	r7, #216	; 0xd8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	80080000 	.word	0x80080000
 8002090:	50040300 	.word	0x50040300
 8002094:	c7520000 	.word	0xc7520000
 8002098:	50040000 	.word	0x50040000
 800209c:	20000000 	.word	0x20000000
 80020a0:	053e2d63 	.word	0x053e2d63
 80020a4:	cb840000 	.word	0xcb840000
 80020a8:	80000001 	.word	0x80000001

080020ac <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff f93e 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 80020c8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff f95f 	bl	8001392 <LL_ADC_INJ_IsConversionOngoing>
 80020d4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8098 	beq.w	8002214 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d02a      	beq.n	8002148 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	7e5b      	ldrb	r3, [r3, #25]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d126      	bne.n	8002148 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	7e1b      	ldrb	r3, [r3, #24]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d122      	bne.n	8002148 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002102:	2301      	movs	r3, #1
 8002104:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002106:	e014      	b.n	8002132 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4a45      	ldr	r2, [pc, #276]	; (8002220 <ADC_ConversionStop+0x174>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d90d      	bls.n	800212c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f043 0210 	orr.w	r2, r3, #16
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	f043 0201 	orr.w	r2, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e074      	b.n	8002216 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3301      	adds	r3, #1
 8002130:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800213c:	2b40      	cmp	r3, #64	; 0x40
 800213e:	d1e3      	bne.n	8002108 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2240      	movs	r2, #64	; 0x40
 8002146:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b02      	cmp	r3, #2
 800214c:	d014      	beq.n	8002178 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f8f6 	bl	8001344 <LL_ADC_REG_IsConversionOngoing>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00c      	beq.n	8002178 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff f8b3 	bl	80012ce <LL_ADC_IsDisableOngoing>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d104      	bne.n	8002178 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f8d2 	bl	800131c <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d014      	beq.n	80021a8 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f905 	bl	8001392 <LL_ADC_INJ_IsConversionOngoing>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00c      	beq.n	80021a8 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff f89b 	bl	80012ce <LL_ADC_IsDisableOngoing>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d104      	bne.n	80021a8 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff f8e1 	bl	800136a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d005      	beq.n	80021ba <ADC_ConversionStop+0x10e>
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d105      	bne.n	80021c0 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80021b4:	230c      	movs	r3, #12
 80021b6:	617b      	str	r3, [r7, #20]
        break;
 80021b8:	e005      	b.n	80021c6 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80021ba:	2308      	movs	r3, #8
 80021bc:	617b      	str	r3, [r7, #20]
        break;
 80021be:	e002      	b.n	80021c6 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80021c0:	2304      	movs	r3, #4
 80021c2:	617b      	str	r3, [r7, #20]
        break;
 80021c4:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80021c6:	f7fe fec3 	bl	8000f50 <HAL_GetTick>
 80021ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021cc:	e01b      	b.n	8002206 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80021ce:	f7fe febf 	bl	8000f50 <HAL_GetTick>
 80021d2:	4602      	mov	r2, r0
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b05      	cmp	r3, #5
 80021da:	d914      	bls.n	8002206 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00d      	beq.n	8002206 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	f043 0210 	orr.w	r2, r3, #16
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	f043 0201 	orr.w	r2, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e007      	b.n	8002216 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1dc      	bne.n	80021ce <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	a33fffff 	.word	0xa33fffff

08002224 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800222c:	2300      	movs	r3, #0
 800222e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f7ff f837 	bl	80012a8 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d169      	bne.n	8002314 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	4b36      	ldr	r3, [pc, #216]	; (8002320 <ADC_Enable+0xfc>)
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d00d      	beq.n	800226a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002252:	f043 0210 	orr.w	r2, r3, #16
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	f043 0201 	orr.w	r2, r3, #1
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e055      	b.n	8002316 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fff2 	bl	8001258 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002274:	482b      	ldr	r0, [pc, #172]	; (8002324 <ADC_Enable+0x100>)
 8002276:	f7fe fe9d 	bl	8000fb4 <LL_ADC_GetCommonPathInternalCh>
 800227a:	4603      	mov	r3, r0
 800227c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d013      	beq.n	80022ac <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <ADC_Enable+0x104>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	099b      	lsrs	r3, r3, #6
 800228a:	4a28      	ldr	r2, [pc, #160]	; (800232c <ADC_Enable+0x108>)
 800228c:	fba2 2303 	umull	r2, r3, r2, r3
 8002290:	099b      	lsrs	r3, r3, #6
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	4613      	mov	r3, r2
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	4413      	add	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 800229e:	e002      	b.n	80022a6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d1f9      	bne.n	80022a0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022ac:	f7fe fe50 	bl	8000f50 <HAL_GetTick>
 80022b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022b2:	e028      	b.n	8002306 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7fe fff5 	bl	80012a8 <LL_ADC_IsEnabled>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d104      	bne.n	80022ce <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe ffc5 	bl	8001258 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022ce:	f7fe fe3f 	bl	8000f50 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d914      	bls.n	8002306 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d00d      	beq.n	8002306 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f043 0210 	orr.w	r2, r3, #16
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	f043 0201 	orr.w	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e007      	b.n	8002316 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b01      	cmp	r3, #1
 8002312:	d1cf      	bne.n	80022b4 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	8000003f 	.word	0x8000003f
 8002324:	50040300 	.word	0x50040300
 8002328:	20000000 	.word	0x20000000
 800232c:	053e2d63 	.word	0x053e2d63

08002330 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe ffc6 	bl	80012ce <LL_ADC_IsDisableOngoing>
 8002342:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4618      	mov	r0, r3
 800234a:	f7fe ffad 	bl	80012a8 <LL_ADC_IsEnabled>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d047      	beq.n	80023e4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d144      	bne.n	80023e4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030d 	and.w	r3, r3, #13
 8002364:	2b01      	cmp	r3, #1
 8002366:	d10c      	bne.n	8002382 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe ff87 	bl	8001280 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2203      	movs	r2, #3
 8002378:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800237a:	f7fe fde9 	bl	8000f50 <HAL_GetTick>
 800237e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002380:	e029      	b.n	80023d6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002386:	f043 0210 	orr.w	r2, r3, #16
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002392:	f043 0201 	orr.w	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e023      	b.n	80023e6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800239e:	f7fe fdd7 	bl	8000f50 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d914      	bls.n	80023d6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00d      	beq.n	80023d6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	f043 0210 	orr.w	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ca:	f043 0201 	orr.w	r2, r3, #1
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e007      	b.n	80023e6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d1dc      	bne.n	800239e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800240c:	4013      	ands	r3, r2
 800240e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002418:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800241c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002420:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <__NVIC_SetPriorityGrouping+0x44>)
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	60d3      	str	r3, [r2, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	e000ed00 	.word	0xe000ed00

08002438 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800243c:	4b04      	ldr	r3, [pc, #16]	; (8002450 <__NVIC_GetPriorityGrouping+0x18>)
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	0a1b      	lsrs	r3, r3, #8
 8002442:	f003 0307 	and.w	r3, r3, #7
}
 8002446:	4618      	mov	r0, r3
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800245e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002462:	2b00      	cmp	r3, #0
 8002464:	db0b      	blt.n	800247e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	f003 021f 	and.w	r2, r3, #31
 800246c:	4907      	ldr	r1, [pc, #28]	; (800248c <__NVIC_EnableIRQ+0x38>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2001      	movs	r0, #1
 8002476:	fa00 f202 	lsl.w	r2, r0, r2
 800247a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	e000e100 	.word	0xe000e100

08002490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	4603      	mov	r3, r0
 8002498:	6039      	str	r1, [r7, #0]
 800249a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	db0a      	blt.n	80024ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	490c      	ldr	r1, [pc, #48]	; (80024dc <__NVIC_SetPriority+0x4c>)
 80024aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	440b      	add	r3, r1
 80024b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024b8:	e00a      	b.n	80024d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	4908      	ldr	r1, [pc, #32]	; (80024e0 <__NVIC_SetPriority+0x50>)
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	3b04      	subs	r3, #4
 80024c8:	0112      	lsls	r2, r2, #4
 80024ca:	b2d2      	uxtb	r2, r2
 80024cc:	440b      	add	r3, r1
 80024ce:	761a      	strb	r2, [r3, #24]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000e100 	.word	0xe000e100
 80024e0:	e000ed00 	.word	0xe000ed00

080024e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f003 0307 	and.w	r3, r3, #7
 80024f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f1c3 0307 	rsb	r3, r3, #7
 80024fe:	2b04      	cmp	r3, #4
 8002500:	bf28      	it	cs
 8002502:	2304      	movcs	r3, #4
 8002504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	3304      	adds	r3, #4
 800250a:	2b06      	cmp	r3, #6
 800250c:	d902      	bls.n	8002514 <NVIC_EncodePriority+0x30>
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	3b03      	subs	r3, #3
 8002512:	e000      	b.n	8002516 <NVIC_EncodePriority+0x32>
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	f04f 32ff 	mov.w	r2, #4294967295
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43da      	mvns	r2, r3
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	401a      	ands	r2, r3
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800252c:	f04f 31ff 	mov.w	r1, #4294967295
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	43d9      	mvns	r1, r3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800253c:	4313      	orrs	r3, r2
         );
}
 800253e:	4618      	mov	r0, r3
 8002540:	3724      	adds	r7, #36	; 0x24
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3b01      	subs	r3, #1
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800255c:	d301      	bcc.n	8002562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800255e:	2301      	movs	r3, #1
 8002560:	e00f      	b.n	8002582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <SysTick_Config+0x40>)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3b01      	subs	r3, #1
 8002568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800256a:	210f      	movs	r1, #15
 800256c:	f04f 30ff 	mov.w	r0, #4294967295
 8002570:	f7ff ff8e 	bl	8002490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002574:	4b05      	ldr	r3, [pc, #20]	; (800258c <SysTick_Config+0x40>)
 8002576:	2200      	movs	r2, #0
 8002578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800257a:	4b04      	ldr	r3, [pc, #16]	; (800258c <SysTick_Config+0x40>)
 800257c:	2207      	movs	r2, #7
 800257e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3708      	adds	r7, #8
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	e000e010 	.word	0xe000e010

08002590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff ff29 	bl	80023f0 <__NVIC_SetPriorityGrouping>
}
 800259e:	bf00      	nop
 80025a0:	3708      	adds	r7, #8
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b086      	sub	sp, #24
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4603      	mov	r3, r0
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80025b8:	f7ff ff3e 	bl	8002438 <__NVIC_GetPriorityGrouping>
 80025bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6978      	ldr	r0, [r7, #20]
 80025c4:	f7ff ff8e 	bl	80024e4 <NVIC_EncodePriority>
 80025c8:	4602      	mov	r2, r0
 80025ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ce:	4611      	mov	r1, r2
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff5d 	bl	8002490 <__NVIC_SetPriority>
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b082      	sub	sp, #8
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	4603      	mov	r3, r0
 80025e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7ff ff31 	bl	8002454 <__NVIC_EnableIRQ>
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025fa:	b580      	push	{r7, lr}
 80025fc:	b082      	sub	sp, #8
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ffa2 	bl	800254c <SysTick_Config>
 8002608:	4603      	mov	r3, r0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e098      	b.n	8002758 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	461a      	mov	r2, r3
 800262c:	4b4d      	ldr	r3, [pc, #308]	; (8002764 <HAL_DMA_Init+0x150>)
 800262e:	429a      	cmp	r2, r3
 8002630:	d80f      	bhi.n	8002652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	4b4b      	ldr	r3, [pc, #300]	; (8002768 <HAL_DMA_Init+0x154>)
 800263a:	4413      	add	r3, r2
 800263c:	4a4b      	ldr	r2, [pc, #300]	; (800276c <HAL_DMA_Init+0x158>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	009a      	lsls	r2, r3, #2
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a48      	ldr	r2, [pc, #288]	; (8002770 <HAL_DMA_Init+0x15c>)
 800264e:	641a      	str	r2, [r3, #64]	; 0x40
 8002650:	e00e      	b.n	8002670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	4b46      	ldr	r3, [pc, #280]	; (8002774 <HAL_DMA_Init+0x160>)
 800265a:	4413      	add	r3, r2
 800265c:	4a43      	ldr	r2, [pc, #268]	; (800276c <HAL_DMA_Init+0x158>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	009a      	lsls	r2, r3, #2
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a42      	ldr	r2, [pc, #264]	; (8002778 <HAL_DMA_Init+0x164>)
 800266e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2202      	movs	r2, #2
 8002674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800268a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026ca:	d039      	beq.n	8002740 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	4a27      	ldr	r2, [pc, #156]	; (8002770 <HAL_DMA_Init+0x15c>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d11a      	bne.n	800270c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80026d6:	4b29      	ldr	r3, [pc, #164]	; (800277c <HAL_DMA_Init+0x168>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	f003 031c 	and.w	r3, r3, #28
 80026e2:	210f      	movs	r1, #15
 80026e4:	fa01 f303 	lsl.w	r3, r1, r3
 80026e8:	43db      	mvns	r3, r3
 80026ea:	4924      	ldr	r1, [pc, #144]	; (800277c <HAL_DMA_Init+0x168>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80026f0:	4b22      	ldr	r3, [pc, #136]	; (800277c <HAL_DMA_Init+0x168>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6859      	ldr	r1, [r3, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026fc:	f003 031c 	and.w	r3, r3, #28
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	491d      	ldr	r1, [pc, #116]	; (800277c <HAL_DMA_Init+0x168>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
 800270a:	e019      	b.n	8002740 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_DMA_Init+0x16c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002714:	f003 031c 	and.w	r3, r3, #28
 8002718:	210f      	movs	r1, #15
 800271a:	fa01 f303 	lsl.w	r3, r1, r3
 800271e:	43db      	mvns	r3, r3
 8002720:	4917      	ldr	r1, [pc, #92]	; (8002780 <HAL_DMA_Init+0x16c>)
 8002722:	4013      	ands	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002726:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_DMA_Init+0x16c>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6859      	ldr	r1, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002732:	f003 031c 	and.w	r3, r3, #28
 8002736:	fa01 f303 	lsl.w	r3, r1, r3
 800273a:	4911      	ldr	r1, [pc, #68]	; (8002780 <HAL_DMA_Init+0x16c>)
 800273c:	4313      	orrs	r3, r2
 800273e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr
 8002764:	40020407 	.word	0x40020407
 8002768:	bffdfff8 	.word	0xbffdfff8
 800276c:	cccccccd 	.word	0xcccccccd
 8002770:	40020000 	.word	0x40020000
 8002774:	bffdfbf8 	.word	0xbffdfbf8
 8002778:	40020400 	.word	0x40020400
 800277c:	400200a8 	.word	0x400200a8
 8002780:	400204a8 	.word	0x400204a8

08002784 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a0:	f003 031c 	and.w	r3, r3, #28
 80027a4:	2204      	movs	r2, #4
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d026      	beq.n	80027fe <HAL_DMA_IRQHandler+0x7a>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d021      	beq.n	80027fe <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d107      	bne.n	80027d8 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0204 	bic.w	r2, r2, #4
 80027d6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027dc:	f003 021c 	and.w	r2, r3, #28
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e4:	2104      	movs	r1, #4
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d071      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80027fc:	e06c      	b.n	80028d8 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	f003 031c 	and.w	r3, r3, #28
 8002806:	2202      	movs	r2, #2
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d02e      	beq.n	8002870 <HAL_DMA_IRQHandler+0xec>
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d029      	beq.n	8002870 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0320 	and.w	r3, r3, #32
 8002826:	2b00      	cmp	r3, #0
 8002828:	d10b      	bne.n	8002842 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 020a 	bic.w	r2, r2, #10
 8002838:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f003 021c 	and.w	r2, r3, #28
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2102      	movs	r1, #2
 8002850:	fa01 f202 	lsl.w	r2, r1, r2
 8002854:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	2b00      	cmp	r3, #0
 8002864:	d038      	beq.n	80028d8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800286e:	e033      	b.n	80028d8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002874:	f003 031c 	and.w	r3, r3, #28
 8002878:	2208      	movs	r2, #8
 800287a:	409a      	lsls	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4013      	ands	r3, r2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02a      	beq.n	80028da <HAL_DMA_IRQHandler+0x156>
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0308 	and.w	r3, r3, #8
 800288a:	2b00      	cmp	r3, #0
 800288c:	d025      	beq.n	80028da <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 020e 	bic.w	r2, r2, #14
 800289c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f003 021c 	and.w	r2, r3, #28
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028aa:	2101      	movs	r1, #1
 80028ac:	fa01 f202 	lsl.w	r2, r1, r2
 80028b0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
}
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
	...

080028e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b087      	sub	sp, #28
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f2:	e154      	b.n	8002b9e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	2101      	movs	r1, #1
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002900:	4013      	ands	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	f000 8146 	beq.w	8002b98 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b01      	cmp	r3, #1
 8002916:	d005      	beq.n	8002924 <HAL_GPIO_Init+0x40>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d130      	bne.n	8002986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	2203      	movs	r2, #3
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	693a      	ldr	r2, [r7, #16]
 8002952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800295a:	2201      	movs	r2, #1
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	fa02 f303 	lsl.w	r3, r2, r3
 8002962:	43db      	mvns	r3, r3
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	4013      	ands	r3, r2
 8002968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	091b      	lsrs	r3, r3, #4
 8002970:	f003 0201 	and.w	r2, r3, #1
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	4313      	orrs	r3, r2
 800297e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	693a      	ldr	r2, [r7, #16]
 8002984:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	2b03      	cmp	r3, #3
 8002990:	d017      	beq.n	80029c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	2203      	movs	r2, #3
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4013      	ands	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	693a      	ldr	r2, [r7, #16]
 80029c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d123      	bne.n	8002a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	08da      	lsrs	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3208      	adds	r2, #8
 80029d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	220f      	movs	r2, #15
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	43db      	mvns	r3, r3
 80029ec:	693a      	ldr	r2, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	6939      	ldr	r1, [r7, #16]
 8002a12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0203 	and.w	r2, r3, #3
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 80a0 	beq.w	8002b98 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a58:	4b58      	ldr	r3, [pc, #352]	; (8002bbc <HAL_GPIO_Init+0x2d8>)
 8002a5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5c:	4a57      	ldr	r2, [pc, #348]	; (8002bbc <HAL_GPIO_Init+0x2d8>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6613      	str	r3, [r2, #96]	; 0x60
 8002a64:	4b55      	ldr	r3, [pc, #340]	; (8002bbc <HAL_GPIO_Init+0x2d8>)
 8002a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a70:	4a53      	ldr	r2, [pc, #332]	; (8002bc0 <HAL_GPIO_Init+0x2dc>)
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	089b      	lsrs	r3, r3, #2
 8002a76:	3302      	adds	r3, #2
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0303 	and.w	r3, r3, #3
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	220f      	movs	r2, #15
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a9a:	d019      	beq.n	8002ad0 <HAL_GPIO_Init+0x1ec>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a49      	ldr	r2, [pc, #292]	; (8002bc4 <HAL_GPIO_Init+0x2e0>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d013      	beq.n	8002acc <HAL_GPIO_Init+0x1e8>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a48      	ldr	r2, [pc, #288]	; (8002bc8 <HAL_GPIO_Init+0x2e4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_GPIO_Init+0x1e4>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a47      	ldr	r2, [pc, #284]	; (8002bcc <HAL_GPIO_Init+0x2e8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d007      	beq.n	8002ac4 <HAL_GPIO_Init+0x1e0>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a46      	ldr	r2, [pc, #280]	; (8002bd0 <HAL_GPIO_Init+0x2ec>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d101      	bne.n	8002ac0 <HAL_GPIO_Init+0x1dc>
 8002abc:	2304      	movs	r3, #4
 8002abe:	e008      	b.n	8002ad2 <HAL_GPIO_Init+0x1ee>
 8002ac0:	2307      	movs	r3, #7
 8002ac2:	e006      	b.n	8002ad2 <HAL_GPIO_Init+0x1ee>
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e004      	b.n	8002ad2 <HAL_GPIO_Init+0x1ee>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e002      	b.n	8002ad2 <HAL_GPIO_Init+0x1ee>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_GPIO_Init+0x1ee>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	f002 0203 	and.w	r2, r2, #3
 8002ad8:	0092      	lsls	r2, r2, #2
 8002ada:	4093      	lsls	r3, r2
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ae2:	4937      	ldr	r1, [pc, #220]	; (8002bc0 <HAL_GPIO_Init+0x2dc>)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	089b      	lsrs	r3, r3, #2
 8002ae8:	3302      	adds	r3, #2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002af0:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002b14:	4a2f      	ldr	r2, [pc, #188]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b3e:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b44:	4b23      	ldr	r3, [pc, #140]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b68:	4a1a      	ldr	r2, [pc, #104]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b6e:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d003      	beq.n	8002b92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b92:	4a10      	ldr	r2, [pc, #64]	; (8002bd4 <HAL_GPIO_Init+0x2f0>)
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f47f aea3 	bne.w	80028f4 <HAL_GPIO_Init+0x10>
  }
}
 8002bae:	bf00      	nop
 8002bb0:	bf00      	nop
 8002bb2:	371c      	adds	r7, #28
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010000 	.word	0x40010000
 8002bc4:	48000400 	.word	0x48000400
 8002bc8:	48000800 	.word	0x48000800
 8002bcc:	48000c00 	.word	0x48000c00
 8002bd0:	48001000 	.word	0x48001000
 8002bd4:	40010400 	.word	0x40010400

08002bd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	460b      	mov	r3, r1
 8002be2:	807b      	strh	r3, [r7, #2]
 8002be4:	4613      	mov	r3, r2
 8002be6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002be8:	787b      	ldrb	r3, [r7, #1]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002bee:	887a      	ldrh	r2, [r7, #2]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002c0c:	4b04      	ldr	r3, [pc, #16]	; (8002c20 <HAL_PWREx_GetVoltageRange+0x18>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	40007000 	.word	0x40007000

08002c24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c32:	d130      	bne.n	8002c96 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c34:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c40:	d038      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c4a:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c50:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	; (8002cc8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2232      	movs	r2, #50	; 0x32
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	4a1b      	ldr	r2, [pc, #108]	; (8002ccc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	0c9b      	lsrs	r3, r3, #18
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c68:	e002      	b.n	8002c70 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c70:	4b14      	ldr	r3, [pc, #80]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c72:	695b      	ldr	r3, [r3, #20]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c7c:	d102      	bne.n	8002c84 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f2      	bne.n	8002c6a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c84:	4b0f      	ldr	r3, [pc, #60]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c86:	695b      	ldr	r3, [r3, #20]
 8002c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c90:	d110      	bne.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e00f      	b.n	8002cb6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c96:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca2:	d007      	beq.n	8002cb4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ca4:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002cac:	4a05      	ldr	r2, [pc, #20]	; (8002cc4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40007000 	.word	0x40007000
 8002cc8:	20000000 	.word	0x20000000
 8002ccc:	431bde83 	.word	0x431bde83

08002cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d102      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	f000 bc02 	b.w	80034e8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ce4:	4b96      	ldr	r3, [pc, #600]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f003 030c 	and.w	r3, r3, #12
 8002cec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cee:	4b94      	ldr	r3, [pc, #592]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0310 	and.w	r3, r3, #16
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80e4 	beq.w	8002ece <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d007      	beq.n	8002d1c <HAL_RCC_OscConfig+0x4c>
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	2b0c      	cmp	r3, #12
 8002d10:	f040 808b 	bne.w	8002e2a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	f040 8087 	bne.w	8002e2a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002d1c:	4b88      	ldr	r3, [pc, #544]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_OscConfig+0x64>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e3d9      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	4b81      	ldr	r3, [pc, #516]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d004      	beq.n	8002d4e <HAL_RCC_OscConfig+0x7e>
 8002d44:	4b7e      	ldr	r3, [pc, #504]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d4c:	e005      	b.n	8002d5a <HAL_RCC_OscConfig+0x8a>
 8002d4e:	4b7c      	ldr	r3, [pc, #496]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	091b      	lsrs	r3, r3, #4
 8002d56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d223      	bcs.n	8002da6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fd8c 	bl	8003880 <RCC_SetFlashLatencyFromMSIRange>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e3ba      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d72:	4b73      	ldr	r3, [pc, #460]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a72      	ldr	r2, [pc, #456]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d78:	f043 0308 	orr.w	r3, r3, #8
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b70      	ldr	r3, [pc, #448]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	496d      	ldr	r1, [pc, #436]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d90:	4b6b      	ldr	r3, [pc, #428]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	4968      	ldr	r1, [pc, #416]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	604b      	str	r3, [r1, #4]
 8002da4:	e025      	b.n	8002df2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a65      	ldr	r2, [pc, #404]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dac:	f043 0308 	orr.w	r3, r3, #8
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	4b63      	ldr	r3, [pc, #396]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1b      	ldr	r3, [r3, #32]
 8002dbe:	4960      	ldr	r1, [pc, #384]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	495b      	ldr	r1, [pc, #364]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fd4c 	bl	8003880 <RCC_SetFlashLatencyFromMSIRange>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e37a      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002df2:	f000 fc81 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b51      	ldr	r3, [pc, #324]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	4950      	ldr	r1, [pc, #320]	; (8002f44 <HAL_RCC_OscConfig+0x274>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0e:	4a4e      	ldr	r2, [pc, #312]	; (8002f48 <HAL_RCC_OscConfig+0x278>)
 8002e10:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002e12:	4b4e      	ldr	r3, [pc, #312]	; (8002f4c <HAL_RCC_OscConfig+0x27c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fe f84a 	bl	8000eb0 <HAL_InitTick>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002e20:	7bfb      	ldrb	r3, [r7, #15]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d052      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002e26:	7bfb      	ldrb	r3, [r7, #15]
 8002e28:	e35e      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	699b      	ldr	r3, [r3, #24]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d032      	beq.n	8002e98 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002e32:	4b43      	ldr	r3, [pc, #268]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a42      	ldr	r2, [pc, #264]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e38:	f043 0301 	orr.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f887 	bl	8000f50 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e46:	f7fe f883 	bl	8000f50 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e347      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e58:	4b39      	ldr	r3, [pc, #228]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0f0      	beq.n	8002e46 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e64:	4b36      	ldr	r3, [pc, #216]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a35      	ldr	r2, [pc, #212]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	f043 0308 	orr.w	r3, r3, #8
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	4930      	ldr	r1, [pc, #192]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e82:	4b2f      	ldr	r3, [pc, #188]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69db      	ldr	r3, [r3, #28]
 8002e8e:	021b      	lsls	r3, r3, #8
 8002e90:	492b      	ldr	r1, [pc, #172]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	604b      	str	r3, [r1, #4]
 8002e96:	e01a      	b.n	8002ece <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a28      	ldr	r2, [pc, #160]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
 8002ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ea4:	f7fe f854 	bl	8000f50 <HAL_GetTick>
 8002ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002eaa:	e008      	b.n	8002ebe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002eac:	f7fe f850 	bl	8000f50 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d901      	bls.n	8002ebe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e314      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ebe:	4b20      	ldr	r3, [pc, #128]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d1f0      	bne.n	8002eac <HAL_RCC_OscConfig+0x1dc>
 8002eca:	e000      	b.n	8002ece <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ecc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d073      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	2b08      	cmp	r3, #8
 8002ede:	d005      	beq.n	8002eec <HAL_RCC_OscConfig+0x21c>
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d10e      	bne.n	8002f04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d10b      	bne.n	8002f04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eec:	4b14      	ldr	r3, [pc, #80]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d063      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d15f      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e2f1      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d106      	bne.n	8002f1c <HAL_RCC_OscConfig+0x24c>
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a0b      	ldr	r2, [pc, #44]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f18:	6013      	str	r3, [r2, #0]
 8002f1a:	e025      	b.n	8002f68 <HAL_RCC_OscConfig+0x298>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d114      	bne.n	8002f50 <HAL_RCC_OscConfig+0x280>
 8002f26:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a05      	ldr	r2, [pc, #20]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b03      	ldr	r3, [pc, #12]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a02      	ldr	r2, [pc, #8]	; (8002f40 <HAL_RCC_OscConfig+0x270>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e013      	b.n	8002f68 <HAL_RCC_OscConfig+0x298>
 8002f40:	40021000 	.word	0x40021000
 8002f44:	08005498 	.word	0x08005498
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000004 	.word	0x20000004
 8002f50:	4ba0      	ldr	r3, [pc, #640]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a9f      	ldr	r2, [pc, #636]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b9d      	ldr	r3, [pc, #628]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a9c      	ldr	r2, [pc, #624]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fd ffee 	bl	8000f50 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f78:	f7fd ffea 	bl	8000f50 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	; 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e2ae      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f8a:	4b92      	ldr	r3, [pc, #584]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x2a8>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f98:	f7fd ffda 	bl	8000f50 <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7fd ffd6 	bl	8000f50 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	; 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e29a      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fb2:	4b88      	ldr	r3, [pc, #544]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0x2d0>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d060      	beq.n	8003090 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x310>
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d119      	bne.n	800300e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d116      	bne.n	800300e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe0:	4b7c      	ldr	r3, [pc, #496]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x328>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d101      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e277      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b76      	ldr	r3, [pc, #472]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	061b      	lsls	r3, r3, #24
 8003006:	4973      	ldr	r1, [pc, #460]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003008:	4313      	orrs	r3, r2
 800300a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800300c:	e040      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d023      	beq.n	800305e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003016:	4b6f      	ldr	r3, [pc, #444]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a6e      	ldr	r2, [pc, #440]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800301c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003022:	f7fd ff95 	bl	8000f50 <HAL_GetTick>
 8003026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003028:	e008      	b.n	800303c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800302a:	f7fd ff91 	bl	8000f50 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d901      	bls.n	800303c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e255      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800303c:	4b65      	ldr	r3, [pc, #404]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0f0      	beq.n	800302a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003048:	4b62      	ldr	r3, [pc, #392]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	061b      	lsls	r3, r3, #24
 8003056:	495f      	ldr	r1, [pc, #380]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003058:	4313      	orrs	r3, r2
 800305a:	604b      	str	r3, [r1, #4]
 800305c:	e018      	b.n	8003090 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a5c      	ldr	r2, [pc, #368]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003064:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306a:	f7fd ff71 	bl	8000f50 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003072:	f7fd ff6d 	bl	8000f50 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e231      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800308c:	2b00      	cmp	r3, #0
 800308e:	d1f0      	bne.n	8003072 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0308 	and.w	r3, r3, #8
 8003098:	2b00      	cmp	r3, #0
 800309a:	d03c      	beq.n	8003116 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01c      	beq.n	80030de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030a4:	4b4b      	ldr	r3, [pc, #300]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030aa:	4a4a      	ldr	r2, [pc, #296]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030ac:	f043 0301 	orr.w	r3, r3, #1
 80030b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b4:	f7fd ff4c 	bl	8000f50 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030bc:	f7fd ff48 	bl	8000f50 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e20c      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030ce:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d0ef      	beq.n	80030bc <HAL_RCC_OscConfig+0x3ec>
 80030dc:	e01b      	b.n	8003116 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030de:	4b3d      	ldr	r3, [pc, #244]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030e4:	4a3b      	ldr	r2, [pc, #236]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80030e6:	f023 0301 	bic.w	r3, r3, #1
 80030ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fd ff2f 	bl	8000f50 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fd ff2b 	bl	8000f50 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e1ef      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003108:	4b32      	ldr	r3, [pc, #200]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800310a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1ef      	bne.n	80030f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0304 	and.w	r3, r3, #4
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80a6 	beq.w	8003270 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003124:	2300      	movs	r3, #0
 8003126:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003128:	4b2a      	ldr	r3, [pc, #168]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10d      	bne.n	8003150 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003134:	4b27      	ldr	r3, [pc, #156]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4a26      	ldr	r2, [pc, #152]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800313a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313e:	6593      	str	r3, [r2, #88]	; 0x58
 8003140:	4b24      	ldr	r3, [pc, #144]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003148:	60bb      	str	r3, [r7, #8]
 800314a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314c:	2301      	movs	r3, #1
 800314e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003150:	4b21      	ldr	r3, [pc, #132]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d118      	bne.n	800318e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800315c:	4b1e      	ldr	r3, [pc, #120]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003166:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003168:	f7fd fef2 	bl	8000f50 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003170:	f7fd feee 	bl	8000f50 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1b2      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <HAL_RCC_OscConfig+0x508>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d108      	bne.n	80031a8 <HAL_RCC_OscConfig+0x4d8>
 8003196:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a0d      	ldr	r2, [pc, #52]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031a6:	e029      	b.n	80031fc <HAL_RCC_OscConfig+0x52c>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b05      	cmp	r3, #5
 80031ae:	d115      	bne.n	80031dc <HAL_RCC_OscConfig+0x50c>
 80031b0:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	4a07      	ldr	r2, [pc, #28]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031b8:	f043 0304 	orr.w	r3, r3, #4
 80031bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031c0:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c6:	4a03      	ldr	r2, [pc, #12]	; (80031d4 <HAL_RCC_OscConfig+0x504>)
 80031c8:	f043 0301 	orr.w	r3, r3, #1
 80031cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031d0:	e014      	b.n	80031fc <HAL_RCC_OscConfig+0x52c>
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40007000 	.word	0x40007000
 80031dc:	4b9a      	ldr	r3, [pc, #616]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	4a99      	ldr	r2, [pc, #612]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031ec:	4b96      	ldr	r3, [pc, #600]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f2:	4a95      	ldr	r2, [pc, #596]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80031f4:	f023 0304 	bic.w	r3, r3, #4
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d016      	beq.n	8003232 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003204:	f7fd fea4 	bl	8000f50 <HAL_GetTick>
 8003208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800320a:	e00a      	b.n	8003222 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800320c:	f7fd fea0 	bl	8000f50 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	f241 3288 	movw	r2, #5000	; 0x1388
 800321a:	4293      	cmp	r3, r2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e162      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003222:	4b89      	ldr	r3, [pc, #548]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003228:	f003 0302 	and.w	r3, r3, #2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ed      	beq.n	800320c <HAL_RCC_OscConfig+0x53c>
 8003230:	e015      	b.n	800325e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003232:	f7fd fe8d 	bl	8000f50 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003238:	e00a      	b.n	8003250 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800323a:	f7fd fe89 	bl	8000f50 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f241 3288 	movw	r2, #5000	; 0x1388
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e14b      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003250:	4b7d      	ldr	r3, [pc, #500]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1ed      	bne.n	800323a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800325e:	7ffb      	ldrb	r3, [r7, #31]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d105      	bne.n	8003270 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003264:	4b78      	ldr	r3, [pc, #480]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	4a77      	ldr	r2, [pc, #476]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800326a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800326e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d03c      	beq.n	80032f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	2b00      	cmp	r3, #0
 8003282:	d01c      	beq.n	80032be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003284:	4b70      	ldr	r3, [pc, #448]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328a:	4a6f      	ldr	r2, [pc, #444]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800328c:	f043 0301 	orr.w	r3, r3, #1
 8003290:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fd fe5c 	bl	8000f50 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329c:	f7fd fe58 	bl	8000f50 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e11c      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80032ae:	4b66      	ldr	r3, [pc, #408]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d0ef      	beq.n	800329c <HAL_RCC_OscConfig+0x5cc>
 80032bc:	e01b      	b.n	80032f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032be:	4b62      	ldr	r3, [pc, #392]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032c4:	4a60      	ldr	r2, [pc, #384]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032c6:	f023 0301 	bic.w	r3, r3, #1
 80032ca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ce:	f7fd fe3f 	bl	8000f50 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d6:	f7fd fe3b 	bl	8000f50 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e0ff      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032e8:	4b57      	ldr	r3, [pc, #348]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80032ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1ef      	bne.n	80032d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80f3 	beq.w	80034e6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003304:	2b02      	cmp	r3, #2
 8003306:	f040 80c9 	bne.w	800349c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800330a:	4b4f      	ldr	r3, [pc, #316]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0203 	and.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	429a      	cmp	r2, r3
 800331c:	d12c      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	3b01      	subs	r3, #1
 800332a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d123      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800333a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d11b      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d113      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	085b      	lsrs	r3, r3, #1
 800335c:	3b01      	subs	r3, #1
 800335e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003360:	429a      	cmp	r2, r3
 8003362:	d109      	bne.n	8003378 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	085b      	lsrs	r3, r3, #1
 8003370:	3b01      	subs	r3, #1
 8003372:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003374:	429a      	cmp	r2, r3
 8003376:	d06b      	beq.n	8003450 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d062      	beq.n	8003444 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800337e:	4b32      	ldr	r3, [pc, #200]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e0ac      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800338e:	4b2e      	ldr	r3, [pc, #184]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a2d      	ldr	r2, [pc, #180]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003394:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003398:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800339a:	f7fd fdd9 	bl	8000f50 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fdd5 	bl	8000f50 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e099      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1f0      	bne.n	80033a2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c0:	4b21      	ldr	r3, [pc, #132]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <HAL_RCC_OscConfig+0x77c>)
 80033c6:	4013      	ands	r3, r2
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033d0:	3a01      	subs	r2, #1
 80033d2:	0112      	lsls	r2, r2, #4
 80033d4:	4311      	orrs	r1, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033da:	0212      	lsls	r2, r2, #8
 80033dc:	4311      	orrs	r1, r2
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033e2:	0852      	lsrs	r2, r2, #1
 80033e4:	3a01      	subs	r2, #1
 80033e6:	0552      	lsls	r2, r2, #21
 80033e8:	4311      	orrs	r1, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033ee:	0852      	lsrs	r2, r2, #1
 80033f0:	3a01      	subs	r2, #1
 80033f2:	0652      	lsls	r2, r2, #25
 80033f4:	4311      	orrs	r1, r2
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033fa:	06d2      	lsls	r2, r2, #27
 80033fc:	430a      	orrs	r2, r1
 80033fe:	4912      	ldr	r1, [pc, #72]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003400:	4313      	orrs	r3, r2
 8003402:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003404:	4b10      	ldr	r3, [pc, #64]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 800340a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800340e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003410:	4b0d      	ldr	r3, [pc, #52]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	4a0c      	ldr	r2, [pc, #48]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003416:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800341c:	f7fd fd98 	bl	8000f50 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003424:	f7fd fd94 	bl	8000f50 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e058      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_OscConfig+0x778>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003442:	e050      	b.n	80034e6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e04f      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
 8003448:	40021000 	.word	0x40021000
 800344c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003450:	4b27      	ldr	r3, [pc, #156]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d144      	bne.n	80034e6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800345c:	4b24      	ldr	r3, [pc, #144]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 8003462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003468:	4b21      	ldr	r3, [pc, #132]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4a20      	ldr	r2, [pc, #128]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 800346e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003472:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003474:	f7fd fd6c 	bl	8000f50 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347c:	f7fd fd68 	bl	8000f50 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e02c      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x7ac>
 800349a:	e024      	b.n	80034e6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	2b0c      	cmp	r3, #12
 80034a0:	d01f      	beq.n	80034e2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034a2:	4b13      	ldr	r3, [pc, #76]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a12      	ldr	r2, [pc, #72]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd fd4f 	bl	8000f50 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b6:	f7fd fd4b 	bl	8000f50 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e00f      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034c8:	4b09      	ldr	r3, [pc, #36]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4905      	ldr	r1, [pc, #20]	; (80034f0 <HAL_RCC_OscConfig+0x820>)
 80034da:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <HAL_RCC_OscConfig+0x824>)
 80034dc:	4013      	ands	r3, r2
 80034de:	60cb      	str	r3, [r1, #12]
 80034e0:	e001      	b.n	80034e6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e000      	b.n	80034e8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3720      	adds	r7, #32
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	feeefffc 	.word	0xfeeefffc

080034f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d101      	bne.n	800350c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e0e7      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800350c:	4b75      	ldr	r3, [pc, #468]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d910      	bls.n	800353c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351a:	4b72      	ldr	r3, [pc, #456]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f023 0207 	bic.w	r2, r3, #7
 8003522:	4970      	ldr	r1, [pc, #448]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	4313      	orrs	r3, r2
 8003528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800352a:	4b6e      	ldr	r3, [pc, #440]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f003 0307 	and.w	r3, r3, #7
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0cf      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b66      	ldr	r3, [pc, #408]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003554:	429a      	cmp	r2, r3
 8003556:	d908      	bls.n	800356a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4960      	ldr	r1, [pc, #384]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d04c      	beq.n	8003610 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b03      	cmp	r3, #3
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800357e:	4b5a      	ldr	r3, [pc, #360]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d121      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e0a6      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d107      	bne.n	80035a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003596:	4b54      	ldr	r3, [pc, #336]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d115      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e09a      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d107      	bne.n	80035be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80035ae:	4b4e      	ldr	r3, [pc, #312]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e08e      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035be:	4b4a      	ldr	r3, [pc, #296]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e086      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035ce:	4b46      	ldr	r3, [pc, #280]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 0203 	bic.w	r2, r3, #3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	4943      	ldr	r1, [pc, #268]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035e0:	f7fd fcb6 	bl	8000f50 <HAL_GetTick>
 80035e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035e6:	e00a      	b.n	80035fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035e8:	f7fd fcb2 	bl	8000f50 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e06e      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fe:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 020c 	and.w	r2, r3, #12
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	429a      	cmp	r2, r3
 800360e:	d1eb      	bne.n	80035e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d010      	beq.n	800363e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003628:	429a      	cmp	r2, r3
 800362a:	d208      	bcs.n	800363e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800362c:	4b2e      	ldr	r3, [pc, #184]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	492b      	ldr	r1, [pc, #172]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800363e:	4b29      	ldr	r3, [pc, #164]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0307 	and.w	r3, r3, #7
 8003646:	683a      	ldr	r2, [r7, #0]
 8003648:	429a      	cmp	r2, r3
 800364a:	d210      	bcs.n	800366e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364c:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 0207 	bic.w	r2, r3, #7
 8003654:	4923      	ldr	r1, [pc, #140]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365c:	4b21      	ldr	r3, [pc, #132]	; (80036e4 <HAL_RCC_ClockConfig+0x1ec>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e036      	b.n	80036dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d008      	beq.n	800368c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367a:	4b1b      	ldr	r3, [pc, #108]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	4918      	ldr	r1, [pc, #96]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0308 	and.w	r3, r3, #8
 8003694:	2b00      	cmp	r3, #0
 8003696:	d009      	beq.n	80036ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4910      	ldr	r1, [pc, #64]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80036ac:	f000 f824 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 80036b0:	4602      	mov	r2, r0
 80036b2:	4b0d      	ldr	r3, [pc, #52]	; (80036e8 <HAL_RCC_ClockConfig+0x1f0>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	091b      	lsrs	r3, r3, #4
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	490b      	ldr	r1, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1f4>)
 80036be:	5ccb      	ldrb	r3, [r1, r3]
 80036c0:	f003 031f 	and.w	r3, r3, #31
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
 80036c8:	4a09      	ldr	r2, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1f8>)
 80036ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80036cc:	4b09      	ldr	r3, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1fc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fd fbed 	bl	8000eb0 <HAL_InitTick>
 80036d6:	4603      	mov	r3, r0
 80036d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80036da:	7afb      	ldrb	r3, [r7, #11]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08005498 	.word	0x08005498
 80036f0:	20000000 	.word	0x20000000
 80036f4:	20000004 	.word	0x20000004

080036f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b089      	sub	sp, #36	; 0x24
 80036fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003706:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x34>
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d121      	bne.n	800376a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d11e      	bne.n	800376a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800372c:	4b34      	ldr	r3, [pc, #208]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d107      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	0a1b      	lsrs	r3, r3, #8
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	e005      	b.n	8003754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003748:	4b2d      	ldr	r3, [pc, #180]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003754:	4a2b      	ldr	r2, [pc, #172]	; (8003804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10d      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003768:	e00a      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d102      	bne.n	8003776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003770:	4b25      	ldr	r3, [pc, #148]	; (8003808 <HAL_RCC_GetSysClockFreq+0x110>)
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e004      	b.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	2b08      	cmp	r3, #8
 800377a:	d101      	bne.n	8003780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800377c:	4b23      	ldr	r3, [pc, #140]	; (800380c <HAL_RCC_GetSysClockFreq+0x114>)
 800377e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0c      	cmp	r3, #12
 8003784:	d134      	bne.n	80037f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003786:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	2b02      	cmp	r3, #2
 8003794:	d003      	beq.n	800379e <HAL_RCC_GetSysClockFreq+0xa6>
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d003      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0xac>
 800379c:	e005      	b.n	80037aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_RCC_GetSysClockFreq+0x110>)
 80037a0:	617b      	str	r3, [r7, #20]
      break;
 80037a2:	e005      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80037a4:	4b19      	ldr	r3, [pc, #100]	; (800380c <HAL_RCC_GetSysClockFreq+0x114>)
 80037a6:	617b      	str	r3, [r7, #20]
      break;
 80037a8:	e002      	b.n	80037b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	617b      	str	r3, [r7, #20]
      break;
 80037ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037b0:	4b13      	ldr	r3, [pc, #76]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	091b      	lsrs	r3, r3, #4
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	3301      	adds	r3, #1
 80037bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80037be:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	fb03 f202 	mul.w	r2, r3, r2
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037d6:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <HAL_RCC_GetSysClockFreq+0x108>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	0e5b      	lsrs	r3, r3, #25
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	3301      	adds	r3, #1
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037f0:	69bb      	ldr	r3, [r7, #24]
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3724      	adds	r7, #36	; 0x24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000
 8003804:	080054b0 	.word	0x080054b0
 8003808:	00f42400 	.word	0x00f42400
 800380c:	007a1200 	.word	0x007a1200

08003810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003810:	b480      	push	{r7}
 8003812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_GetHCLKFreq+0x14>)
 8003816:	681b      	ldr	r3, [r3, #0]
}
 8003818:	4618      	mov	r0, r3
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000000 	.word	0x20000000

08003828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800382c:	f7ff fff0 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 8003830:	4602      	mov	r2, r0
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	4904      	ldr	r1, [pc, #16]	; (8003850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800383e:	5ccb      	ldrb	r3, [r1, r3]
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003848:	4618      	mov	r0, r3
 800384a:	bd80      	pop	{r7, pc}
 800384c:	40021000 	.word	0x40021000
 8003850:	080054a8 	.word	0x080054a8

08003854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003858:	f7ff ffda 	bl	8003810 <HAL_RCC_GetHCLKFreq>
 800385c:	4602      	mov	r2, r0
 800385e:	4b06      	ldr	r3, [pc, #24]	; (8003878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	0adb      	lsrs	r3, r3, #11
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	4904      	ldr	r1, [pc, #16]	; (800387c <HAL_RCC_GetPCLK2Freq+0x28>)
 800386a:	5ccb      	ldrb	r3, [r1, r3]
 800386c:	f003 031f 	and.w	r3, r3, #31
 8003870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003874:	4618      	mov	r0, r3
 8003876:	bd80      	pop	{r7, pc}
 8003878:	40021000 	.word	0x40021000
 800387c:	080054a8 	.word	0x080054a8

08003880 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800388c:	4b2a      	ldr	r3, [pc, #168]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003898:	f7ff f9b6 	bl	8002c08 <HAL_PWREx_GetVoltageRange>
 800389c:	6178      	str	r0, [r7, #20]
 800389e:	e014      	b.n	80038ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b25      	ldr	r3, [pc, #148]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	4a24      	ldr	r2, [pc, #144]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	4b22      	ldr	r3, [pc, #136]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038b8:	f7ff f9a6 	bl	8002c08 <HAL_PWREx_GetVoltageRange>
 80038bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038be:	4b1e      	ldr	r3, [pc, #120]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	4a1d      	ldr	r2, [pc, #116]	; (8003938 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038d0:	d10b      	bne.n	80038ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b80      	cmp	r3, #128	; 0x80
 80038d6:	d919      	bls.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2ba0      	cmp	r3, #160	; 0xa0
 80038dc:	d902      	bls.n	80038e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038de:	2302      	movs	r3, #2
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e013      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80038e4:	2301      	movs	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]
 80038e8:	e010      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b80      	cmp	r3, #128	; 0x80
 80038ee:	d902      	bls.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80038f0:	2303      	movs	r3, #3
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	e00a      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2b80      	cmp	r3, #128	; 0x80
 80038fa:	d102      	bne.n	8003902 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80038fc:	2302      	movs	r3, #2
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e004      	b.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d101      	bne.n	800390c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003908:	2301      	movs	r3, #1
 800390a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800390c:	4b0b      	ldr	r3, [pc, #44]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f023 0207 	bic.w	r2, r3, #7
 8003914:	4909      	ldr	r1, [pc, #36]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800391c:	4b07      	ldr	r3, [pc, #28]	; (800393c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	693a      	ldr	r2, [r7, #16]
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	40022000 	.word	0x40022000

08003940 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b086      	sub	sp, #24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003948:	2300      	movs	r3, #0
 800394a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800394c:	2300      	movs	r3, #0
 800394e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003958:	2b00      	cmp	r3, #0
 800395a:	d031      	beq.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003960:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003964:	d01a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003966:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800396a:	d814      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d009      	beq.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003974:	d10f      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003976:	4b5d      	ldr	r3, [pc, #372]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	4a5c      	ldr	r2, [pc, #368]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800397c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003980:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003982:	e00c      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	3304      	adds	r3, #4
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f000 fa44 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003994:	e003      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	74fb      	strb	r3, [r7, #19]
      break;
 800399a:	e000      	b.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800399c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d10b      	bne.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039a4:	4b51      	ldr	r3, [pc, #324]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039b2:	494e      	ldr	r1, [pc, #312]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039ba:	e001      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039bc:	7cfb      	ldrb	r3, [r7, #19]
 80039be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 809e 	beq.w	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ce:	2300      	movs	r3, #0
 80039d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039d2:	4b46      	ldr	r3, [pc, #280]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80039de:	2301      	movs	r3, #1
 80039e0:	e000      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80039e2:	2300      	movs	r3, #0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00d      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039e8:	4b40      	ldr	r3, [pc, #256]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ec:	4a3f      	ldr	r2, [pc, #252]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f2:	6593      	str	r3, [r2, #88]	; 0x58
 80039f4:	4b3d      	ldr	r3, [pc, #244]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a04:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a39      	ldr	r2, [pc, #228]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a10:	f7fd fa9e 	bl	8000f50 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a16:	e009      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a18:	f7fd fa9a 	bl	8000f50 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d902      	bls.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	74fb      	strb	r3, [r7, #19]
        break;
 8003a2a:	e005      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a2c:	4b30      	ldr	r3, [pc, #192]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0ef      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a38:	7cfb      	ldrb	r3, [r7, #19]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d15a      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a3e:	4b2b      	ldr	r3, [pc, #172]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d01e      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d019      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a5a:	4b24      	ldr	r3, [pc, #144]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a64:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a6c:	4a1f      	ldr	r2, [pc, #124]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a86:	4a19      	ldr	r2, [pc, #100]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d016      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fd fa5a 	bl	8000f50 <HAL_GetTick>
 8003a9c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fd fa56 	bl	8000f50 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d902      	bls.n	8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	74fb      	strb	r3, [r7, #19]
            break;
 8003ab6:	e006      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ab8:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0ec      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003ac6:	7cfb      	ldrb	r3, [r7, #19]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003acc:	4b07      	ldr	r3, [pc, #28]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ada:	4904      	ldr	r1, [pc, #16]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003ae2:	e009      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ae4:	7cfb      	ldrb	r3, [r7, #19]
 8003ae6:	74bb      	strb	r3, [r7, #18]
 8003ae8:	e006      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003aea:	bf00      	nop
 8003aec:	40021000 	.word	0x40021000
 8003af0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	7cfb      	ldrb	r3, [r7, #19]
 8003af6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003af8:	7c7b      	ldrb	r3, [r7, #17]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d105      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003afe:	4b9e      	ldr	r3, [pc, #632]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	4a9d      	ldr	r2, [pc, #628]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b16:	4b98      	ldr	r3, [pc, #608]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1c:	f023 0203 	bic.w	r2, r3, #3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4994      	ldr	r1, [pc, #592]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0302 	and.w	r3, r3, #2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b38:	4b8f      	ldr	r3, [pc, #572]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 020c 	bic.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	498c      	ldr	r1, [pc, #560]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b5a:	4b87      	ldr	r3, [pc, #540]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	4983      	ldr	r1, [pc, #524]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	497b      	ldr	r1, [pc, #492]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0320 	and.w	r3, r3, #32
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4972      	ldr	r1, [pc, #456]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bc0:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bc6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	496a      	ldr	r1, [pc, #424]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003be2:	4b65      	ldr	r3, [pc, #404]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf0:	4961      	ldr	r1, [pc, #388]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c04:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c12:	4959      	ldr	r1, [pc, #356]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c26:	4b54      	ldr	r3, [pc, #336]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	4950      	ldr	r1, [pc, #320]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c48:	4b4b      	ldr	r3, [pc, #300]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c56:	4948      	ldr	r1, [pc, #288]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c6a:	4b43      	ldr	r3, [pc, #268]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c70:	f023 0203 	bic.w	r2, r3, #3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c78:	493f      	ldr	r1, [pc, #252]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d028      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c8c:	4b3a      	ldr	r3, [pc, #232]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c9a:	4937      	ldr	r1, [pc, #220]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003caa:	d106      	bne.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cac:	4b32      	ldr	r3, [pc, #200]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	4a31      	ldr	r2, [pc, #196]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb6:	60d3      	str	r3, [r2, #12]
 8003cb8:	e011      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cbe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc2:	d10c      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	3304      	adds	r3, #4
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f8a4 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8003cda:	7cfb      	ldrb	r3, [r7, #19]
 8003cdc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d028      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003cea:	4b23      	ldr	r3, [pc, #140]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf8:	491f      	ldr	r1, [pc, #124]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d08:	d106      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4a1a      	ldr	r2, [pc, #104]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d14:	60d3      	str	r3, [r2, #12]
 8003d16:	e011      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d20:	d10c      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3304      	adds	r3, #4
 8003d26:	2101      	movs	r1, #1
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f000 f875 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d32:	7cfb      	ldrb	r3, [r7, #19]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d02b      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d48:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	4908      	ldr	r1, [pc, #32]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d66:	d109      	bne.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d68:	4b03      	ldr	r3, [pc, #12]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	4a02      	ldr	r2, [pc, #8]	; (8003d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d72:	60d3      	str	r3, [r2, #12]
 8003d74:	e014      	b.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d84:	d10c      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 f843 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d96:	7cfb      	ldrb	r3, [r7, #19]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d001      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8003d9c:	7cfb      	ldrb	r3, [r7, #19]
 8003d9e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01c      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dac:	4b19      	ldr	r3, [pc, #100]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dba:	4916      	ldr	r1, [pc, #88]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dca:	d10c      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	3304      	adds	r3, #4
 8003dd0:	2102      	movs	r1, #2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f000 f820 	bl	8003e18 <RCCEx_PLLSAI1_Config>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ddc:	7cfb      	ldrb	r3, [r7, #19]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d001      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8003de2:	7cfb      	ldrb	r3, [r7, #19]
 8003de4:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003df2:	4b08      	ldr	r3, [pc, #32]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e00:	4904      	ldr	r1, [pc, #16]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e08:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3718      	adds	r7, #24
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000

08003e18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2300      	movs	r3, #0
 8003e24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003e26:	4b74      	ldr	r3, [pc, #464]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d018      	beq.n	8003e64 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003e32:	4b71      	ldr	r3, [pc, #452]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f003 0203 	and.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10d      	bne.n	8003e5e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
       ||
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003e4a:	4b6b      	ldr	r3, [pc, #428]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
       ||
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d047      	beq.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
 8003e62:	e044      	b.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d018      	beq.n	8003e9e <RCCEx_PLLSAI1_Config+0x86>
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d825      	bhi.n	8003ebc <RCCEx_PLLSAI1_Config+0xa4>
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d002      	beq.n	8003e7a <RCCEx_PLLSAI1_Config+0x62>
 8003e74:	2b02      	cmp	r3, #2
 8003e76:	d009      	beq.n	8003e8c <RCCEx_PLLSAI1_Config+0x74>
 8003e78:	e020      	b.n	8003ebc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003e7a:	4b5f      	ldr	r3, [pc, #380]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d11d      	bne.n	8003ec2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8a:	e01a      	b.n	8003ec2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003e8c:	4b5a      	ldr	r3, [pc, #360]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d116      	bne.n	8003ec6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e9c:	e013      	b.n	8003ec6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003e9e:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10f      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003eaa:	4b53      	ldr	r3, [pc, #332]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d109      	bne.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003eba:	e006      	b.n	8003eca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec0:	e004      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e002      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e000      	b.n	8003ecc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003eca:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10d      	bne.n	8003eee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6819      	ldr	r1, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	430b      	orrs	r3, r1
 8003ee8:	4943      	ldr	r1, [pc, #268]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d17c      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a3f      	ldr	r2, [pc, #252]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003efa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd f826 	bl	8000f50 <HAL_GetTick>
 8003f04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f06:	e009      	b.n	8003f1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f08:	f7fd f822 	bl	8000f50 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	68bb      	ldr	r3, [r7, #8]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d902      	bls.n	8003f1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	73fb      	strb	r3, [r7, #15]
        break;
 8003f1a:	e005      	b.n	8003f28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f1c:	4b36      	ldr	r3, [pc, #216]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1ef      	bne.n	8003f08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003f28:	7bfb      	ldrb	r3, [r7, #15]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d15f      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d110      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f34:	4b30      	ldr	r3, [pc, #192]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003f3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6892      	ldr	r2, [r2, #8]
 8003f44:	0211      	lsls	r1, r2, #8
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	06d2      	lsls	r2, r2, #27
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	492a      	ldr	r1, [pc, #168]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	610b      	str	r3, [r1, #16]
 8003f54:	e027      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d112      	bne.n	8003f82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f5c:	4b26      	ldr	r3, [pc, #152]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003f64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	6892      	ldr	r2, [r2, #8]
 8003f6c:	0211      	lsls	r1, r2, #8
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	6912      	ldr	r2, [r2, #16]
 8003f72:	0852      	lsrs	r2, r2, #1
 8003f74:	3a01      	subs	r2, #1
 8003f76:	0552      	lsls	r2, r2, #21
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	610b      	str	r3, [r1, #16]
 8003f80:	e011      	b.n	8003fa6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003f82:	4b1d      	ldr	r3, [pc, #116]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003f8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6892      	ldr	r2, [r2, #8]
 8003f92:	0211      	lsls	r1, r2, #8
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6952      	ldr	r2, [r2, #20]
 8003f98:	0852      	lsrs	r2, r2, #1
 8003f9a:	3a01      	subs	r2, #1
 8003f9c:	0652      	lsls	r2, r2, #25
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	4915      	ldr	r1, [pc, #84]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003fa6:	4b14      	ldr	r3, [pc, #80]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a13      	ldr	r2, [pc, #76]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fb0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb2:	f7fc ffcd 	bl	8000f50 <HAL_GetTick>
 8003fb6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fb8:	e009      	b.n	8003fce <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003fba:	f7fc ffc9 	bl	8000f50 <HAL_GetTick>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d902      	bls.n	8003fce <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	73fb      	strb	r3, [r7, #15]
          break;
 8003fcc:	e005      	b.n	8003fda <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ef      	beq.n	8003fba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d106      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4903      	ldr	r1, [pc, #12]	; (8003ff8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3710      	adds	r7, #16
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000

08003ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e040      	b.n	8004096 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a1c      	ldr	r2, [pc, #112]	; (80040a4 <HAL_TIM_Base_Start_IT+0xa8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00e      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x58>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d009      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x58>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a18      	ldr	r2, [pc, #96]	; (80040a8 <HAL_TIM_Base_Start_IT+0xac>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d004      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0x58>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_TIM_Base_Start_IT+0xb0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d115      	bne.n	8004080 <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	689a      	ldr	r2, [r3, #8]
 800405a:	4b15      	ldr	r3, [pc, #84]	; (80040b0 <HAL_TIM_Base_Start_IT+0xb4>)
 800405c:	4013      	ands	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2b06      	cmp	r3, #6
 8004064:	d015      	beq.n	8004092 <HAL_TIM_Base_Start_IT+0x96>
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800406c:	d011      	beq.n	8004092 <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407e:	e008      	b.n	8004092 <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e000      	b.n	8004094 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004092:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3714      	adds	r7, #20
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40012c00 	.word	0x40012c00
 80040a8:	40000400 	.word	0x40000400
 80040ac:	40014000 	.word	0x40014000
 80040b0:	00010007 	.word	0x00010007

080040b4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b082      	sub	sp, #8
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d101      	bne.n	80040c6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e049      	b.n	800415a <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fdb2 	bl	8000c44 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2202      	movs	r2, #2
 80040e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	3304      	adds	r3, #4
 80040f0:	4619      	mov	r1, r3
 80040f2:	4610      	mov	r0, r2
 80040f4:	f000 fa18 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3708      	adds	r7, #8
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b082      	sub	sp, #8
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b02      	cmp	r3, #2
 8004176:	d122      	bne.n	80041be <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	68db      	ldr	r3, [r3, #12]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b02      	cmp	r3, #2
 8004184:	d11b      	bne.n	80041be <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f06f 0202 	mvn.w	r2, #2
 800418e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f9a1 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 80041aa:	e005      	b.n	80041b8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f993 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 f9a4 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d122      	bne.n	8004212 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	f003 0304 	and.w	r3, r3, #4
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d11b      	bne.n	8004212 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f06f 0204 	mvn.w	r2, #4
 80041e2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2202      	movs	r2, #2
 80041e8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f977 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 80041fe:	e005      	b.n	800420c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f969 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f97a 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b08      	cmp	r3, #8
 800421e:	d122      	bne.n	8004266 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11b      	bne.n	8004266 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f06f 0208 	mvn.w	r2, #8
 8004236:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2204      	movs	r2, #4
 800423c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f94d 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 8004252:	e005      	b.n	8004260 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f93f 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f950 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b10      	cmp	r3, #16
 8004272:	d122      	bne.n	80042ba <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d11b      	bne.n	80042ba <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f06f 0210 	mvn.w	r2, #16
 800428a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2208      	movs	r2, #8
 8004290:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429c:	2b00      	cmp	r3, #0
 800429e:	d003      	beq.n	80042a8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f923 	bl	80044ec <HAL_TIM_IC_CaptureCallback>
 80042a6:	e005      	b.n	80042b4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f000 f915 	bl	80044d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f000 f926 	bl	8004500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d10e      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0201 	mvn.w	r2, #1
 80042de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7fc f9b5 	bl	8000650 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f0:	2b80      	cmp	r3, #128	; 0x80
 80042f2:	d10e      	bne.n	8004312 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042fe:	2b80      	cmp	r3, #128	; 0x80
 8004300:	d107      	bne.n	8004312 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800430a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fb03 	bl	8004918 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004320:	d10e      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	2b80      	cmp	r3, #128	; 0x80
 800432e:	d107      	bne.n	8004340 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004338:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 faf6 	bl	800492c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b40      	cmp	r3, #64	; 0x40
 800434c:	d10e      	bne.n	800436c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d107      	bne.n	800436c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f8d4 	bl	8004514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b20      	cmp	r3, #32
 8004378:	d10e      	bne.n	8004398 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f003 0320 	and.w	r3, r3, #32
 8004384:	2b20      	cmp	r3, #32
 8004386:	d107      	bne.n	8004398 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f06f 0220 	mvn.w	r2, #32
 8004390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fab6 	bl	8004904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004398:	bf00      	nop
 800439a:	3708      	adds	r7, #8
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d101      	bne.n	80043be <HAL_TIM_IC_ConfigChannel+0x1e>
 80043ba:	2302      	movs	r3, #2
 80043bc:	e088      	b.n	80044d0 <HAL_TIM_IC_ConfigChannel+0x130>
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11b      	bne.n	8004404 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f000 f912 	bl	8004604 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699a      	ldr	r2, [r3, #24]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f022 020c 	bic.w	r2, r2, #12
 80043ee:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6999      	ldr	r1, [r3, #24]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	430a      	orrs	r2, r1
 8004400:	619a      	str	r2, [r3, #24]
 8004402:	e060      	b.n	80044c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2b04      	cmp	r3, #4
 8004408:	d11c      	bne.n	8004444 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	6819      	ldr	r1, [r3, #0]
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	685a      	ldr	r2, [r3, #4]
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f000 f94f 	bl	80046bc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800442c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6999      	ldr	r1, [r3, #24]
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	021a      	lsls	r2, r3, #8
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	619a      	str	r2, [r3, #24]
 8004442:	e040      	b.n	80044c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b08      	cmp	r3, #8
 8004448:	d11b      	bne.n	8004482 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6818      	ldr	r0, [r3, #0]
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	6819      	ldr	r1, [r3, #0]
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	f000 f96c 	bl	8004736 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 020c 	bic.w	r2, r2, #12
 800446c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69d9      	ldr	r1, [r3, #28]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
 8004480:	e021      	b.n	80044c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b0c      	cmp	r3, #12
 8004486:	d11c      	bne.n	80044c2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	6819      	ldr	r1, [r3, #0]
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	685a      	ldr	r2, [r3, #4]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	f000 f989 	bl	80047ae <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	69da      	ldr	r2, [r3, #28]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80044aa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	69d9      	ldr	r1, [r3, #28]
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	021a      	lsls	r2, r3, #8
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	61da      	str	r2, [r3, #28]
 80044c0:	e001      	b.n	80044c6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80044ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d8:	b480      	push	{r7}
 80044da:	b083      	sub	sp, #12
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f4:	bf00      	nop
 80044f6:	370c      	adds	r7, #12
 80044f8:	46bd      	mov	sp, r7
 80044fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fe:	4770      	bx	lr

08004500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a2e      	ldr	r2, [pc, #184]	; (80045f4 <TIM_Base_SetConfig+0xcc>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d007      	beq.n	8004550 <TIM_Base_SetConfig+0x28>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d003      	beq.n	8004550 <TIM_Base_SetConfig+0x28>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a2b      	ldr	r2, [pc, #172]	; (80045f8 <TIM_Base_SetConfig+0xd0>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d108      	bne.n	8004562 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4313      	orrs	r3, r2
 8004560:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a23      	ldr	r2, [pc, #140]	; (80045f4 <TIM_Base_SetConfig+0xcc>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004570:	d00b      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <TIM_Base_SetConfig+0xd0>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <TIM_Base_SetConfig+0xd4>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0x62>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <TIM_Base_SetConfig+0xd8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a0c      	ldr	r2, [pc, #48]	; (80045f4 <TIM_Base_SetConfig+0xcc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d007      	beq.n	80045d8 <TIM_Base_SetConfig+0xb0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a0c      	ldr	r2, [pc, #48]	; (80045fc <TIM_Base_SetConfig+0xd4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d003      	beq.n	80045d8 <TIM_Base_SetConfig+0xb0>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a0b      	ldr	r2, [pc, #44]	; (8004600 <TIM_Base_SetConfig+0xd8>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d103      	bne.n	80045e0 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	691a      	ldr	r2, [r3, #16]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	615a      	str	r2, [r3, #20]
}
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40012c00 	.word	0x40012c00
 80045f8:	40000400 	.word	0x40000400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400

08004604 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
 8004610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0201 	bic.w	r2, r3, #1
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a1b      	ldr	r3, [r3, #32]
 8004628:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4a20      	ldr	r2, [pc, #128]	; (80046b0 <TIM_TI1_SetConfig+0xac>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d00b      	beq.n	800464a <TIM_TI1_SetConfig+0x46>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004638:	d007      	beq.n	800464a <TIM_TI1_SetConfig+0x46>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a1d      	ldr	r2, [pc, #116]	; (80046b4 <TIM_TI1_SetConfig+0xb0>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d003      	beq.n	800464a <TIM_TI1_SetConfig+0x46>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <TIM_TI1_SetConfig+0xb4>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <TIM_TI1_SetConfig+0x4a>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <TIM_TI1_SetConfig+0x4c>
 800464e:	2300      	movs	r3, #0
 8004650:	2b00      	cmp	r3, #0
 8004652:	d008      	beq.n	8004666 <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0303 	bic.w	r3, r3, #3
 800465a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4313      	orrs	r3, r2
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e003      	b.n	800466e <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004674:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	b2db      	uxtb	r3, r3
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	4313      	orrs	r3, r2
 8004680:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f023 030a 	bic.w	r3, r3, #10
 8004688:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	f003 030a 	and.w	r3, r3, #10
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	621a      	str	r2, [r3, #32]
}
 80046a2:	bf00      	nop
 80046a4:	371c      	adds	r7, #28
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40012c00 	.word	0x40012c00
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40014000 	.word	0x40014000

080046bc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	697a      	ldr	r2, [r7, #20]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	031b      	lsls	r3, r3, #12
 8004700:	b29b      	uxth	r3, r3
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	4313      	orrs	r3, r2
 8004706:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800470e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	621a      	str	r2, [r3, #32]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr

08004736 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004736:	b480      	push	{r7}
 8004738:	b087      	sub	sp, #28
 800473a:	af00      	add	r7, sp, #0
 800473c:	60f8      	str	r0, [r7, #12]
 800473e:	60b9      	str	r1, [r7, #8]
 8004740:	607a      	str	r2, [r7, #4]
 8004742:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a1b      	ldr	r3, [r3, #32]
 8004748:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	f023 0303 	bic.w	r3, r3, #3
 8004762:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4313      	orrs	r3, r2
 800476a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004772:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	011b      	lsls	r3, r3, #4
 8004778:	b2db      	uxtb	r3, r3
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004786:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	021b      	lsls	r3, r3, #8
 800478c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	621a      	str	r2, [r3, #32]
}
 80047a2:	bf00      	nop
 80047a4:	371c      	adds	r7, #28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
 80047ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6a1b      	ldr	r3, [r3, #32]
 80047c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	69db      	ldr	r3, [r3, #28]
 80047cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	021b      	lsls	r3, r3, #8
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	4313      	orrs	r3, r2
 80047e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004800:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	031b      	lsls	r3, r3, #12
 8004806:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	4313      	orrs	r3, r2
 800480e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	621a      	str	r2, [r3, #32]
}
 800481c:	bf00      	nop
 800481e:	371c      	adds	r7, #28
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004838:	2b01      	cmp	r3, #1
 800483a:	d101      	bne.n	8004840 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800483c:	2302      	movs	r3, #2
 800483e:	e054      	b.n	80048ea <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2202      	movs	r2, #2
 800484c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a24      	ldr	r2, [pc, #144]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004870:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004882:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	4313      	orrs	r3, r2
 800488c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a17      	ldr	r2, [pc, #92]	; (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00e      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a8:	d009      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a13      	ldr	r2, [pc, #76]	; (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a11      	ldr	r2, [pc, #68]	; (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10c      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	40012c00 	.word	0x40012c00
 80048fc:	40000400 	.word	0x40000400
 8004900:	40014000 	.word	0x40014000

08004904 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d101      	bne.n	8004952 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e040      	b.n	80049d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004956:	2b00      	cmp	r3, #0
 8004958:	d106      	bne.n	8004968 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc f9b6 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2224      	movs	r2, #36	; 0x24
 800496c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f022 0201 	bic.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f8c0 	bl	8004b04 <UART_SetConfig>
 8004984:	4603      	mov	r3, r0
 8004986:	2b01      	cmp	r3, #1
 8004988:	d101      	bne.n	800498e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e022      	b.n	80049d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d002      	beq.n	800499c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fb3a 	bl	8005010 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685a      	ldr	r2, [r3, #4]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0201 	orr.w	r2, r2, #1
 80049ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fbc1 	bl	8005154 <UART_CheckIdleState>
 80049d2:	4603      	mov	r3, r0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	4613      	mov	r3, r2
 80049ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80049f0:	2b20      	cmp	r3, #32
 80049f2:	f040 8082 	bne.w	8004afa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_UART_Transmit+0x26>
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e07a      	b.n	8004afc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_UART_Transmit+0x38>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e073      	b.n	8004afc <HAL_UART_Transmit+0x120>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2221      	movs	r2, #33	; 0x21
 8004a28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a2a:	f7fc fa91 	bl	8000f50 <HAL_GetTick>
 8004a2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a48:	d108      	bne.n	8004a5c <HAL_UART_Transmit+0x80>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d104      	bne.n	8004a5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	61bb      	str	r3, [r7, #24]
 8004a5a:	e003      	b.n	8004a64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004a6c:	e02d      	b.n	8004aca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	9300      	str	r3, [sp, #0]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	2200      	movs	r2, #0
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fbb4 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e039      	b.n	8004afc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10b      	bne.n	8004aa6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	881a      	ldrh	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	61bb      	str	r3, [r7, #24]
 8004aa4:	e008      	b.n	8004ab8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	b292      	uxth	r2, r2
 8004ab0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d1cb      	bne.n	8004a6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2200      	movs	r2, #0
 8004ade:	2140      	movs	r1, #64	; 0x40
 8004ae0:	68f8      	ldr	r0, [r7, #12]
 8004ae2:	f000 fb80 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d001      	beq.n	8004af0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e005      	b.n	8004afc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2220      	movs	r2, #32
 8004af4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b08:	b08a      	sub	sp, #40	; 0x28
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4ba5      	ldr	r3, [pc, #660]	; (8004dc8 <UART_SetConfig+0x2c4>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a9a      	ldr	r2, [pc, #616]	; (8004dcc <UART_SetConfig+0x2c8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b80:	430a      	orrs	r2, r1
 8004b82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a91      	ldr	r2, [pc, #580]	; (8004dd0 <UART_SetConfig+0x2cc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d126      	bne.n	8004bdc <UART_SetConfig+0xd8>
 8004b8e:	4b91      	ldr	r3, [pc, #580]	; (8004dd4 <UART_SetConfig+0x2d0>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f003 0303 	and.w	r3, r3, #3
 8004b98:	2b03      	cmp	r3, #3
 8004b9a:	d81b      	bhi.n	8004bd4 <UART_SetConfig+0xd0>
 8004b9c:	a201      	add	r2, pc, #4	; (adr r2, 8004ba4 <UART_SetConfig+0xa0>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004bb5 	.word	0x08004bb5
 8004ba8:	08004bc5 	.word	0x08004bc5
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bcd 	.word	0x08004bcd
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bba:	e0d6      	b.n	8004d6a <UART_SetConfig+0x266>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc2:	e0d2      	b.n	8004d6a <UART_SetConfig+0x266>
 8004bc4:	2304      	movs	r3, #4
 8004bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bca:	e0ce      	b.n	8004d6a <UART_SetConfig+0x266>
 8004bcc:	2308      	movs	r3, #8
 8004bce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd2:	e0ca      	b.n	8004d6a <UART_SetConfig+0x266>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bda:	e0c6      	b.n	8004d6a <UART_SetConfig+0x266>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a7d      	ldr	r2, [pc, #500]	; (8004dd8 <UART_SetConfig+0x2d4>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d138      	bne.n	8004c58 <UART_SetConfig+0x154>
 8004be6:	4b7b      	ldr	r3, [pc, #492]	; (8004dd4 <UART_SetConfig+0x2d0>)
 8004be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bec:	f003 030c 	and.w	r3, r3, #12
 8004bf0:	2b0c      	cmp	r3, #12
 8004bf2:	d82d      	bhi.n	8004c50 <UART_SetConfig+0x14c>
 8004bf4:	a201      	add	r2, pc, #4	; (adr r2, 8004bfc <UART_SetConfig+0xf8>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c31 	.word	0x08004c31
 8004c00:	08004c51 	.word	0x08004c51
 8004c04:	08004c51 	.word	0x08004c51
 8004c08:	08004c51 	.word	0x08004c51
 8004c0c:	08004c41 	.word	0x08004c41
 8004c10:	08004c51 	.word	0x08004c51
 8004c14:	08004c51 	.word	0x08004c51
 8004c18:	08004c51 	.word	0x08004c51
 8004c1c:	08004c39 	.word	0x08004c39
 8004c20:	08004c51 	.word	0x08004c51
 8004c24:	08004c51 	.word	0x08004c51
 8004c28:	08004c51 	.word	0x08004c51
 8004c2c:	08004c49 	.word	0x08004c49
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e098      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e094      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c40:	2304      	movs	r3, #4
 8004c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c46:	e090      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c48:	2308      	movs	r3, #8
 8004c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4e:	e08c      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c50:	2310      	movs	r3, #16
 8004c52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c56:	e088      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a5f      	ldr	r2, [pc, #380]	; (8004ddc <UART_SetConfig+0x2d8>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d125      	bne.n	8004cae <UART_SetConfig+0x1aa>
 8004c62:	4b5c      	ldr	r3, [pc, #368]	; (8004dd4 <UART_SetConfig+0x2d0>)
 8004c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c6c:	2b30      	cmp	r3, #48	; 0x30
 8004c6e:	d016      	beq.n	8004c9e <UART_SetConfig+0x19a>
 8004c70:	2b30      	cmp	r3, #48	; 0x30
 8004c72:	d818      	bhi.n	8004ca6 <UART_SetConfig+0x1a2>
 8004c74:	2b20      	cmp	r3, #32
 8004c76:	d00a      	beq.n	8004c8e <UART_SetConfig+0x18a>
 8004c78:	2b20      	cmp	r3, #32
 8004c7a:	d814      	bhi.n	8004ca6 <UART_SetConfig+0x1a2>
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <UART_SetConfig+0x182>
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d008      	beq.n	8004c96 <UART_SetConfig+0x192>
 8004c84:	e00f      	b.n	8004ca6 <UART_SetConfig+0x1a2>
 8004c86:	2300      	movs	r3, #0
 8004c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8c:	e06d      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c8e:	2302      	movs	r3, #2
 8004c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c94:	e069      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c96:	2304      	movs	r3, #4
 8004c98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9c:	e065      	b.n	8004d6a <UART_SetConfig+0x266>
 8004c9e:	2308      	movs	r3, #8
 8004ca0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca4:	e061      	b.n	8004d6a <UART_SetConfig+0x266>
 8004ca6:	2310      	movs	r3, #16
 8004ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cac:	e05d      	b.n	8004d6a <UART_SetConfig+0x266>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a4b      	ldr	r2, [pc, #300]	; (8004de0 <UART_SetConfig+0x2dc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d125      	bne.n	8004d04 <UART_SetConfig+0x200>
 8004cb8:	4b46      	ldr	r3, [pc, #280]	; (8004dd4 <UART_SetConfig+0x2d0>)
 8004cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc4:	d016      	beq.n	8004cf4 <UART_SetConfig+0x1f0>
 8004cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004cc8:	d818      	bhi.n	8004cfc <UART_SetConfig+0x1f8>
 8004cca:	2b80      	cmp	r3, #128	; 0x80
 8004ccc:	d00a      	beq.n	8004ce4 <UART_SetConfig+0x1e0>
 8004cce:	2b80      	cmp	r3, #128	; 0x80
 8004cd0:	d814      	bhi.n	8004cfc <UART_SetConfig+0x1f8>
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <UART_SetConfig+0x1d8>
 8004cd6:	2b40      	cmp	r3, #64	; 0x40
 8004cd8:	d008      	beq.n	8004cec <UART_SetConfig+0x1e8>
 8004cda:	e00f      	b.n	8004cfc <UART_SetConfig+0x1f8>
 8004cdc:	2300      	movs	r3, #0
 8004cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce2:	e042      	b.n	8004d6a <UART_SetConfig+0x266>
 8004ce4:	2302      	movs	r3, #2
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cea:	e03e      	b.n	8004d6a <UART_SetConfig+0x266>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf2:	e03a      	b.n	8004d6a <UART_SetConfig+0x266>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cfa:	e036      	b.n	8004d6a <UART_SetConfig+0x266>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d02:	e032      	b.n	8004d6a <UART_SetConfig+0x266>
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a30      	ldr	r2, [pc, #192]	; (8004dcc <UART_SetConfig+0x2c8>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d12a      	bne.n	8004d64 <UART_SetConfig+0x260>
 8004d0e:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <UART_SetConfig+0x2d0>)
 8004d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1c:	d01a      	beq.n	8004d54 <UART_SetConfig+0x250>
 8004d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d22:	d81b      	bhi.n	8004d5c <UART_SetConfig+0x258>
 8004d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d28:	d00c      	beq.n	8004d44 <UART_SetConfig+0x240>
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d815      	bhi.n	8004d5c <UART_SetConfig+0x258>
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <UART_SetConfig+0x238>
 8004d34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d38:	d008      	beq.n	8004d4c <UART_SetConfig+0x248>
 8004d3a:	e00f      	b.n	8004d5c <UART_SetConfig+0x258>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d42:	e012      	b.n	8004d6a <UART_SetConfig+0x266>
 8004d44:	2302      	movs	r3, #2
 8004d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d4a:	e00e      	b.n	8004d6a <UART_SetConfig+0x266>
 8004d4c:	2304      	movs	r3, #4
 8004d4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d52:	e00a      	b.n	8004d6a <UART_SetConfig+0x266>
 8004d54:	2308      	movs	r3, #8
 8004d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d5a:	e006      	b.n	8004d6a <UART_SetConfig+0x266>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004d62:	e002      	b.n	8004d6a <UART_SetConfig+0x266>
 8004d64:	2310      	movs	r3, #16
 8004d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a17      	ldr	r2, [pc, #92]	; (8004dcc <UART_SetConfig+0x2c8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	f040 808b 	bne.w	8004e8c <UART_SetConfig+0x388>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d834      	bhi.n	8004de8 <UART_SetConfig+0x2e4>
 8004d7e:	a201      	add	r2, pc, #4	; (adr r2, 8004d84 <UART_SetConfig+0x280>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004de9 	.word	0x08004de9
 8004d8c:	08004db1 	.word	0x08004db1
 8004d90:	08004de9 	.word	0x08004de9
 8004d94:	08004db7 	.word	0x08004db7
 8004d98:	08004de9 	.word	0x08004de9
 8004d9c:	08004de9 	.word	0x08004de9
 8004da0:	08004de9 	.word	0x08004de9
 8004da4:	08004dbf 	.word	0x08004dbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7fe fd3e 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61f8      	str	r0, [r7, #28]
        break;
 8004dae:	e021      	b.n	8004df4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db0:	4b0c      	ldr	r3, [pc, #48]	; (8004de4 <UART_SetConfig+0x2e0>)
 8004db2:	61fb      	str	r3, [r7, #28]
        break;
 8004db4:	e01e      	b.n	8004df4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004db6:	f7fe fc9f 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004dba:	61f8      	str	r0, [r7, #28]
        break;
 8004dbc:	e01a      	b.n	8004df4 <UART_SetConfig+0x2f0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dc2:	61fb      	str	r3, [r7, #28]
        break;
 8004dc4:	e016      	b.n	8004df4 <UART_SetConfig+0x2f0>
 8004dc6:	bf00      	nop
 8004dc8:	efff69f3 	.word	0xefff69f3
 8004dcc:	40008000 	.word	0x40008000
 8004dd0:	40013800 	.word	0x40013800
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40004400 	.word	0x40004400
 8004ddc:	40004800 	.word	0x40004800
 8004de0:	40004c00 	.word	0x40004c00
 8004de4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004dec:	2301      	movs	r3, #1
 8004dee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004df2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80fa 	beq.w	8004ff0 <UART_SetConfig+0x4ec>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685a      	ldr	r2, [r3, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	4413      	add	r3, r2
 8004e06:	69fa      	ldr	r2, [r7, #28]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d305      	bcc.n	8004e18 <UART_SetConfig+0x314>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e12:	69fa      	ldr	r2, [r7, #28]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d903      	bls.n	8004e20 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e1e:	e0e7      	b.n	8004ff0 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	2200      	movs	r2, #0
 8004e24:	461c      	mov	r4, r3
 8004e26:	4615      	mov	r5, r2
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	022b      	lsls	r3, r5, #8
 8004e32:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004e36:	0222      	lsls	r2, r4, #8
 8004e38:	68f9      	ldr	r1, [r7, #12]
 8004e3a:	6849      	ldr	r1, [r1, #4]
 8004e3c:	0849      	lsrs	r1, r1, #1
 8004e3e:	2000      	movs	r0, #0
 8004e40:	4688      	mov	r8, r1
 8004e42:	4681      	mov	r9, r0
 8004e44:	eb12 0a08 	adds.w	sl, r2, r8
 8004e48:	eb43 0b09 	adc.w	fp, r3, r9
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	603b      	str	r3, [r7, #0]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e5a:	4650      	mov	r0, sl
 8004e5c:	4659      	mov	r1, fp
 8004e5e:	f7fb f9c1 	bl	80001e4 <__aeabi_uldivmod>
 8004e62:	4602      	mov	r2, r0
 8004e64:	460b      	mov	r3, r1
 8004e66:	4613      	mov	r3, r2
 8004e68:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e70:	d308      	bcc.n	8004e84 <UART_SetConfig+0x380>
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e78:	d204      	bcs.n	8004e84 <UART_SetConfig+0x380>
        {
          huart->Instance->BRR = usartdiv;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	60da      	str	r2, [r3, #12]
 8004e82:	e0b5      	b.n	8004ff0 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e8a:	e0b1      	b.n	8004ff0 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	d15d      	bne.n	8004f52 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 8004e96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e9a:	2b08      	cmp	r3, #8
 8004e9c:	d827      	bhi.n	8004eee <UART_SetConfig+0x3ea>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <UART_SetConfig+0x3a0>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ec9 	.word	0x08004ec9
 8004ea8:	08004ed1 	.word	0x08004ed1
 8004eac:	08004ed9 	.word	0x08004ed9
 8004eb0:	08004eef 	.word	0x08004eef
 8004eb4:	08004edf 	.word	0x08004edf
 8004eb8:	08004eef 	.word	0x08004eef
 8004ebc:	08004eef 	.word	0x08004eef
 8004ec0:	08004eef 	.word	0x08004eef
 8004ec4:	08004ee7 	.word	0x08004ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7fe fcae 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	61f8      	str	r0, [r7, #28]
        break;
 8004ece:	e014      	b.n	8004efa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ed0:	f7fe fcc0 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004ed4:	61f8      	str	r0, [r7, #28]
        break;
 8004ed6:	e010      	b.n	8004efa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed8:	4b4c      	ldr	r3, [pc, #304]	; (800500c <UART_SetConfig+0x508>)
 8004eda:	61fb      	str	r3, [r7, #28]
        break;
 8004edc:	e00d      	b.n	8004efa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ede:	f7fe fc0b 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004ee2:	61f8      	str	r0, [r7, #28]
        break;
 8004ee4:	e009      	b.n	8004efa <UART_SetConfig+0x3f6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eea:	61fb      	str	r3, [r7, #28]
        break;
 8004eec:	e005      	b.n	8004efa <UART_SetConfig+0x3f6>
      default:
        pclk = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ef8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d077      	beq.n	8004ff0 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	005a      	lsls	r2, r3, #1
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	085b      	lsrs	r3, r3, #1
 8004f0a:	441a      	add	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f14:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b0f      	cmp	r3, #15
 8004f1a:	d916      	bls.n	8004f4a <UART_SetConfig+0x446>
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f22:	d212      	bcs.n	8004f4a <UART_SetConfig+0x446>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f24:	69bb      	ldr	r3, [r7, #24]
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	f023 030f 	bic.w	r3, r3, #15
 8004f2c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	085b      	lsrs	r3, r3, #1
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	8afb      	ldrh	r3, [r7, #22]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	8afa      	ldrh	r2, [r7, #22]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	e052      	b.n	8004ff0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004f50:	e04e      	b.n	8004ff0 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f52:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004f56:	2b08      	cmp	r3, #8
 8004f58:	d827      	bhi.n	8004faa <UART_SetConfig+0x4a6>
 8004f5a:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <UART_SetConfig+0x45c>)
 8004f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f60:	08004f85 	.word	0x08004f85
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f95 	.word	0x08004f95
 8004f6c:	08004fab 	.word	0x08004fab
 8004f70:	08004f9b 	.word	0x08004f9b
 8004f74:	08004fab 	.word	0x08004fab
 8004f78:	08004fab 	.word	0x08004fab
 8004f7c:	08004fab 	.word	0x08004fab
 8004f80:	08004fa3 	.word	0x08004fa3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f84:	f7fe fc50 	bl	8003828 <HAL_RCC_GetPCLK1Freq>
 8004f88:	61f8      	str	r0, [r7, #28]
        break;
 8004f8a:	e014      	b.n	8004fb6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f8c:	f7fe fc62 	bl	8003854 <HAL_RCC_GetPCLK2Freq>
 8004f90:	61f8      	str	r0, [r7, #28]
        break;
 8004f92:	e010      	b.n	8004fb6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f94:	4b1d      	ldr	r3, [pc, #116]	; (800500c <UART_SetConfig+0x508>)
 8004f96:	61fb      	str	r3, [r7, #28]
        break;
 8004f98:	e00d      	b.n	8004fb6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f9a:	f7fe fbad 	bl	80036f8 <HAL_RCC_GetSysClockFreq>
 8004f9e:	61f8      	str	r0, [r7, #28]
        break;
 8004fa0:	e009      	b.n	8004fb6 <UART_SetConfig+0x4b2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fa6:	61fb      	str	r3, [r7, #28]
        break;
 8004fa8:	e005      	b.n	8004fb6 <UART_SetConfig+0x4b2>
      default:
        pclk = 0U;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004fb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d019      	beq.n	8004ff0 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	085a      	lsrs	r2, r3, #1
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	441a      	add	r2, r3
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b0f      	cmp	r3, #15
 8004fd4:	d909      	bls.n	8004fea <UART_SetConfig+0x4e6>
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fdc:	d205      	bcs.n	8004fea <UART_SetConfig+0x4e6>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	b29a      	uxth	r2, r3
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60da      	str	r2, [r3, #12]
 8004fe8:	e002      	b.n	8004ff0 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004ffc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005000:	4618      	mov	r0, r3
 8005002:	3728      	adds	r7, #40	; 0x28
 8005004:	46bd      	mov	sp, r7
 8005006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800500a:	bf00      	nop
 800500c:	00f42400 	.word	0x00f42400

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503e:	f003 0302 	and.w	r3, r3, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d00a      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00a      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005082:	f003 0308 	and.w	r3, r3, #8
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	f003 0310 	and.w	r3, r3, #16
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d01a      	beq.n	8005126 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800510e:	d10a      	bne.n	8005126 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	430a      	orrs	r2, r1
 8005124:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	430a      	orrs	r2, r1
 8005146:	605a      	str	r2, [r3, #4]
  }
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af02      	add	r7, sp, #8
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005164:	f7fb fef4 	bl	8000f50 <HAL_GetTick>
 8005168:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10e      	bne.n	8005196 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005178:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f82d 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e023      	b.n	80051de <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d10e      	bne.n	80051c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	2200      	movs	r2, #0
 80051ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f817 	bl	80051e6 <UART_WaitOnFlagUntilTimeout>
 80051b8:	4603      	mov	r3, r0
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e00d      	b.n	80051de <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2220      	movs	r2, #32
 80051c6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b09c      	sub	sp, #112	; 0x70
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	603b      	str	r3, [r7, #0]
 80051f2:	4613      	mov	r3, r2
 80051f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f6:	e0a5      	b.n	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	f000 80a1 	beq.w	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005202:	f7fb fea5 	bl	8000f50 <HAL_GetTick>
 8005206:	4602      	mov	r2, r0
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800520e:	429a      	cmp	r2, r3
 8005210:	d302      	bcc.n	8005218 <UART_WaitOnFlagUntilTimeout+0x32>
 8005212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005214:	2b00      	cmp	r3, #0
 8005216:	d13e      	bne.n	8005296 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800522c:	667b      	str	r3, [r7, #100]	; 0x64
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	461a      	mov	r2, r3
 8005234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005236:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005238:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800523c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e6      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3308      	adds	r3, #8
 8005250:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	f023 0301 	bic.w	r3, r3, #1
 8005260:	663b      	str	r3, [r7, #96]	; 0x60
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3308      	adds	r3, #8
 8005268:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800526a:	64ba      	str	r2, [r7, #72]	; 0x48
 800526c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005270:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e5      	bne.n	800524a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2220      	movs	r2, #32
 8005282:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e067      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0304 	and.w	r3, r3, #4
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d04f      	beq.n	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052b2:	d147      	bne.n	8005344 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052bc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	e853 3f00 	ldrex	r3, [r3]
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052e4:	e841 2300 	strex	r3, r2, [r1]
 80052e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d1e6      	bne.n	80052be <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3308      	adds	r3, #8
 80052f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	e853 3f00 	ldrex	r3, [r3]
 80052fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	f023 0301 	bic.w	r3, r3, #1
 8005306:	66bb      	str	r3, [r7, #104]	; 0x68
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	3308      	adds	r3, #8
 800530e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005310:	623a      	str	r2, [r7, #32]
 8005312:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	e841 2300 	strex	r3, r2, [r1]
 800531c:	61bb      	str	r3, [r7, #24]
   return(result);
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d1e5      	bne.n	80052f0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2220      	movs	r2, #32
 8005328:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2220      	movs	r2, #32
 800532e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e010      	b.n	8005366 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69da      	ldr	r2, [r3, #28]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	4013      	ands	r3, r2
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	429a      	cmp	r2, r3
 8005352:	bf0c      	ite	eq
 8005354:	2301      	moveq	r3, #1
 8005356:	2300      	movne	r3, #0
 8005358:	b2db      	uxtb	r3, r3
 800535a:	461a      	mov	r2, r3
 800535c:	79fb      	ldrb	r3, [r7, #7]
 800535e:	429a      	cmp	r2, r3
 8005360:	f43f af4a 	beq.w	80051f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3770      	adds	r7, #112	; 0x70
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
	...

08005370 <__libc_init_array>:
 8005370:	b570      	push	{r4, r5, r6, lr}
 8005372:	4d0d      	ldr	r5, [pc, #52]	; (80053a8 <__libc_init_array+0x38>)
 8005374:	4c0d      	ldr	r4, [pc, #52]	; (80053ac <__libc_init_array+0x3c>)
 8005376:	1b64      	subs	r4, r4, r5
 8005378:	10a4      	asrs	r4, r4, #2
 800537a:	2600      	movs	r6, #0
 800537c:	42a6      	cmp	r6, r4
 800537e:	d109      	bne.n	8005394 <__libc_init_array+0x24>
 8005380:	4d0b      	ldr	r5, [pc, #44]	; (80053b0 <__libc_init_array+0x40>)
 8005382:	4c0c      	ldr	r4, [pc, #48]	; (80053b4 <__libc_init_array+0x44>)
 8005384:	f000 f87c 	bl	8005480 <_init>
 8005388:	1b64      	subs	r4, r4, r5
 800538a:	10a4      	asrs	r4, r4, #2
 800538c:	2600      	movs	r6, #0
 800538e:	42a6      	cmp	r6, r4
 8005390:	d105      	bne.n	800539e <__libc_init_array+0x2e>
 8005392:	bd70      	pop	{r4, r5, r6, pc}
 8005394:	f855 3b04 	ldr.w	r3, [r5], #4
 8005398:	4798      	blx	r3
 800539a:	3601      	adds	r6, #1
 800539c:	e7ee      	b.n	800537c <__libc_init_array+0xc>
 800539e:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a2:	4798      	blx	r3
 80053a4:	3601      	adds	r6, #1
 80053a6:	e7f2      	b.n	800538e <__libc_init_array+0x1e>
 80053a8:	08005510 	.word	0x08005510
 80053ac:	08005510 	.word	0x08005510
 80053b0:	08005510 	.word	0x08005510
 80053b4:	08005514 	.word	0x08005514

080053b8 <__itoa>:
 80053b8:	1e93      	subs	r3, r2, #2
 80053ba:	2b22      	cmp	r3, #34	; 0x22
 80053bc:	b510      	push	{r4, lr}
 80053be:	460c      	mov	r4, r1
 80053c0:	d904      	bls.n	80053cc <__itoa+0x14>
 80053c2:	2300      	movs	r3, #0
 80053c4:	700b      	strb	r3, [r1, #0]
 80053c6:	461c      	mov	r4, r3
 80053c8:	4620      	mov	r0, r4
 80053ca:	bd10      	pop	{r4, pc}
 80053cc:	2a0a      	cmp	r2, #10
 80053ce:	d109      	bne.n	80053e4 <__itoa+0x2c>
 80053d0:	2800      	cmp	r0, #0
 80053d2:	da07      	bge.n	80053e4 <__itoa+0x2c>
 80053d4:	232d      	movs	r3, #45	; 0x2d
 80053d6:	700b      	strb	r3, [r1, #0]
 80053d8:	4240      	negs	r0, r0
 80053da:	2101      	movs	r1, #1
 80053dc:	4421      	add	r1, r4
 80053de:	f000 f80d 	bl	80053fc <__utoa>
 80053e2:	e7f1      	b.n	80053c8 <__itoa+0x10>
 80053e4:	2100      	movs	r1, #0
 80053e6:	e7f9      	b.n	80053dc <__itoa+0x24>

080053e8 <itoa>:
 80053e8:	f7ff bfe6 	b.w	80053b8 <__itoa>

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <__utoa>:
 80053fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053fe:	4c1f      	ldr	r4, [pc, #124]	; (800547c <__utoa+0x80>)
 8005400:	b08b      	sub	sp, #44	; 0x2c
 8005402:	4605      	mov	r5, r0
 8005404:	460b      	mov	r3, r1
 8005406:	466e      	mov	r6, sp
 8005408:	f104 0c20 	add.w	ip, r4, #32
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	6861      	ldr	r1, [r4, #4]
 8005410:	4637      	mov	r7, r6
 8005412:	c703      	stmia	r7!, {r0, r1}
 8005414:	3408      	adds	r4, #8
 8005416:	4564      	cmp	r4, ip
 8005418:	463e      	mov	r6, r7
 800541a:	d1f7      	bne.n	800540c <__utoa+0x10>
 800541c:	7921      	ldrb	r1, [r4, #4]
 800541e:	7139      	strb	r1, [r7, #4]
 8005420:	1e91      	subs	r1, r2, #2
 8005422:	6820      	ldr	r0, [r4, #0]
 8005424:	6038      	str	r0, [r7, #0]
 8005426:	2922      	cmp	r1, #34	; 0x22
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	d904      	bls.n	8005438 <__utoa+0x3c>
 800542e:	7019      	strb	r1, [r3, #0]
 8005430:	460b      	mov	r3, r1
 8005432:	4618      	mov	r0, r3
 8005434:	b00b      	add	sp, #44	; 0x2c
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005438:	1e58      	subs	r0, r3, #1
 800543a:	4684      	mov	ip, r0
 800543c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005440:	fb02 5617 	mls	r6, r2, r7, r5
 8005444:	3628      	adds	r6, #40	; 0x28
 8005446:	446e      	add	r6, sp
 8005448:	460c      	mov	r4, r1
 800544a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800544e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005452:	462e      	mov	r6, r5
 8005454:	42b2      	cmp	r2, r6
 8005456:	f101 0101 	add.w	r1, r1, #1
 800545a:	463d      	mov	r5, r7
 800545c:	d9ee      	bls.n	800543c <__utoa+0x40>
 800545e:	2200      	movs	r2, #0
 8005460:	545a      	strb	r2, [r3, r1]
 8005462:	1919      	adds	r1, r3, r4
 8005464:	1aa5      	subs	r5, r4, r2
 8005466:	42aa      	cmp	r2, r5
 8005468:	dae3      	bge.n	8005432 <__utoa+0x36>
 800546a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800546e:	780e      	ldrb	r6, [r1, #0]
 8005470:	7006      	strb	r6, [r0, #0]
 8005472:	3201      	adds	r2, #1
 8005474:	f801 5901 	strb.w	r5, [r1], #-1
 8005478:	e7f4      	b.n	8005464 <__utoa+0x68>
 800547a:	bf00      	nop
 800547c:	080054e0 	.word	0x080054e0

08005480 <_init>:
 8005480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005482:	bf00      	nop
 8005484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005486:	bc08      	pop	{r3}
 8005488:	469e      	mov	lr, r3
 800548a:	4770      	bx	lr

0800548c <_fini>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	bf00      	nop
 8005490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005492:	bc08      	pop	{r3}
 8005494:	469e      	mov	lr, r3
 8005496:	4770      	bx	lr
